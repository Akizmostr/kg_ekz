<!-- (C) 2016 Хаджинова Н.В., каф. ИТАС, БГУИР -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
<LINK rel=stylesheet href="Оболочка/css/style.css" type=text/css>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<META HTTP-EQUIV="Content-Language" CONTENT="ru">
<title>Лекция № 1 &quot;Основные понятия компьютерной графики&quot;</title>
<base target="_top">
<style type="text/css">
div.Normal {mso-style-name:"Normal Знак";
	mso-style-priority:99;
	mso-style-unhide:no;
	mso-style-parent:"";
	mso-style-link:"Normal Знак Знак";
	margin-top:5.0pt;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:0cm;
	text-align:left;
	mso-pagination:none;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";}
li.Normal {mso-style-name:"Normal Знак";
	mso-style-priority:99;
	mso-style-unhide:no;
	mso-style-parent:"";
	mso-style-link:"Normal Знак Знак";
	margin-top:5.0pt;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:0cm;
	text-align:left;
	mso-pagination:none;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";}
p.Normal {mso-style-name:"Normal Знак";
	mso-style-priority:99;
	mso-style-unhide:no;
	mso-style-parent:"";
	mso-style-link:"Normal Знак Знак";
	margin-top:5.0pt;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:0cm;
	text-align:left;
	mso-pagination:none;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";}
</style>
</HEAD><BODY>
<div align="center">
  <h1>Лекция № 1 &quot;<strong>Основные понятия    компьютерной графики</strong>&quot; </h1>
</div>
<hr>
<table width="1321" border="1">
  <tr>
    <td width="205"><img src="../../../Оболочка/images/bsuir1.png" width="205" height="170"></td>
    <td width="1100">Данной лекцией начинается курс по учебной дисциплине &quot;Компьютерная графика&quot;, читаемой в БГУИР для студентов специальности 1-53 01 02 &laquo;Автоматизированные системы обработки информации&raquo;.</td>
  </tr>
</table>
<hr>
<h2>Темы, рассматриваемые в данной лекции:</h2>
<ol>
  <li>Предмет курса. Значение курса.</li>
  <li>Основная терминология.</li>
  <li>Краткая историческая справка. Философия развития       средств визуализации.</li>
  <li>Основные направления современной компьютерной       графики. Применение компьютерной графики. Виды компьютерной графики.       Классификация современного программного обеспечения обработки графики.</li>
  <li>Основные понятия растровой и векторной графики,       их сравнительная характеристика. Достоинства и недостатки разных способов       представления изображений. Примеры программ растровой и векторной графики. </li>
  <li>Основные характеристики растровых изображений:       разрешение, глубина цвета, тоновый диапазон.</li>
  <li>Форматы графических файлов, их возможности,  достоинства и недостатки, сравнительная характеристика и алгоритмы сжатия.  (Формат PCX и групповое кодирование. Формат BMP. Формат TGA (Targa). Формат  GIF. Aлгоритм сжатия LZW для GIF. Формат JPEG и алгоритм сжатия с потерями.  Формат RAW для профессионального использования. Формат FIF и фрактальное  сжатие.)<hr>
  </li>
</ol>
<h2><a name="_Toc402445724"></a><a name="_Toc402404238">Определение компьютерной графики, цель науки</a></h2>
<p><strong>Определение</strong>.  Компьютерная графика (также машинная графика в настоящее время уже вполне  сформировалась как наука о формальных способах автоматического построения и  преобразования пространства (как реального, так и виртуального) на плоскости и  графических объектов в нем, авангард компьютерных технологий; это область  деятельности, в которой компьютеры используются в качестве инструмента как для  синтеза (создания) изображений (рисунков, чертежей, мультипликации) на  компьютере, так и для обработки визуальной информации, полученной из реального  мира.<br>
  <strong>Цель науки</strong> &ndash;  разработка формальных способов построения двух-, трех-, а также многомерных  наглядных изображений, максимально реалистичных или максимально точных с точки  зрения наблюдателя. Наука тесно связана с геометрией, психологией, математикой,  моделированием, компьютерным программированием.<br>
  Раздел информатики, занимающийся проблемами создания  обработки на компьютере графических изображений, также называется компьютерной  графикой.</p>
<h2><a name="_Toc402445725"></a><a name="_Toc402404239">История компьютерной графики</a></h2>
<p>Первые вычислительные машины не имели отдельных средств для  работы с графикой, однако уже использовались для получения и обработки  изображений. Программируя память первых электронных машин, построенную на  основе матрицы ламп, можно было получать узоры.<br>
  Результатами расчетов на первых компьютерах являлись длинные  колонки чисел, напечатанных на бумаге. Для того чтобы осознать полученные  результаты, человек брал бумагу, карандаши, линейки и другие чертежные  инструменты и чертил графики, диаграммы, чертежи рассчитанных конструкций.  Иначе говоря, человек вручную производил графическую обработку результатов  вычислений. В графическом виде такие результаты становятся более наглядными и  понятными.<br>
  Возникла идея поручить графическую обработку самой машине.  Первоначально программисты научились получать рисунки в режиме символьной  печати.<br>
  В 1961 году программист С. Рассел возглавил проект по  созданию первой компьютерной игры с графикой. Создание игры (&laquo;Spacewar!&raquo;)  заняло около 200 человеко-часов. Игра была создана на машине PDP-1.<br>
  В 1963 году американский учёный Айвен Сазерленд создал  программно-аппаратный комплекс Sketchpad, который позволял рисовать точки,  линии и окружности на трубке цифровым пером. Поддерживались базовые действия с  примитивами: перемещение, копирование и др. По сути, это был первый векторный  редактор, реализованный на компьютере. Также программу можно назвать первым  графическим интерфейсом, причём она являлась таковой ещё до появления самого  термина.<br>
  На бумажных листах с помощью символов (звездочек, точек,  крестиков, букв) получались рисунки, напоминающие мозаику. Так печатались  графики функций, изображения течений жидкостей и газов, электрических и магнитных  полей. С помощью символьной печати программисты умудрялись получать даже  художественные изображения. В редком компьютерном центре стены не украшались  распечатками с портретами Эйнштейна, репродукциями Джоконды и другой машинной  живописью (рисунок 1).</p>
<p align="center"><img width="188" height="248" src="lk1_clip_image002.jpg" alt="http://pics.livejournal.com/alekpetuk/pic/0000hg73/s320x240"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p align="center">Рисунок  1 &ndash; Пример символьной печати</p>
<p>В середине 1960-х гг. появились разработки в промышленных  приложениях компьютерной графики. Так, под руководством Т. Мофетта и Н. Тейлора  фирма Itek разработала цифровую электронную чертёжную машину (графопостроитель,  плоттер). С помощью такого устройства на лист бумаги чернильным пером наносятся  графические изображения: графики, диаграммы, технические чертежи и прочее. Для  управления работой графопостроителей стали создавать специальное программное обеспечение.  В 1964 году General Motors представила систему автоматизированного  проектирования DAC-1, разработанную совместно с IBM.<br>
  В 1964 году группой под руководством Н. Н. Константинова  была создана компьютерная математическая модель движения кошки. Машина БЭСМ-4,  выполняя написанную программу решения дифференциальных уравнений, рисовала  мультфильм &laquo;Кошечка&raquo;, который для своего времени являлся прорывом. Для  визуализации использовался алфавитно-цифровой принтер.<br>
  В 1968 году существенный прогресс компьютерная графика  испытала с появлением возможности запоминать изображения и выводить их на  компьютерном дисплее, электронно-лучевой трубке. На экране графического дисплея  стало возможным получать рисунки, чертежи в таком же виде, как на бумаге с  помощью карандашей, красок, чертежных инструментов.<br>
  Рисунок из памяти компьютера может быть выведен не только на  экран, но и на бумагу с помощью принтера. Существуют принтеры цветной печати,  дающие качество рисунков на уровне фотографии.<br>
  Компьютерная графика насчитывает в своем развитии не более  десятка лет. А ее коммерческим приложениям - и того меньше. Андриес ван Дам  считается одним из отцов компьютерной графики, а его книги - фундаментальными  учебниками по всему спектру технологий, положенных в основу машинной графики. </p>
<h2><a name="_Toc402445726"></a><a name="_Toc402404240">Классификация компьютерной графики</a></h2>
<p>Множество  графических изображений, выводимых на экран компьютера, представляет  компьютерную графику. Ее можно классифицировать по различным признакам.<br>
  <strong>По размерности</strong> получаемого изображения:</p>
<ul>
  <li>двумерная компьютерная  графика (2D-графика) &ndash; плоские 2-мерные изображения. Компьютерная  графика классифицируется по типу представления графической информации, и  следующими из него алгоритмами обработки изображений. Используется в  полиграфических комплексах, в дизайнерских, презентационных, анимационных  программах. Обычно компьютерную графику разделяют на векторную и растровую,  хотя обособляют ещё и фрактальный тип представления изображений.</li>
  <li>трехмерная компьютерная  графика (3D-графика) &ndash;графика, изучающая приемы и методы  построения объемных объектов в пространстве. Оперирует с объектами в  трёхмерном пространстве. Обычно результаты представляют собой плоскую картинку,  проекцию. Трёхмерная компьютерная графика широко используется в кино, компьютерных  играх. Как правило, в ней сочетаются  векторный и растровый способ формирования изображения. В трёхмерной  компьютерной графике все объекты обычно представляются как набор поверхностей  или частиц. Минимальную поверхность называют полигоном. В качестве полигона  обычно выбирают треугольники. Всеми визуальными преобразованиями в 3D-графике  управляют матрицы (поворота, сдвига, масштабирования). Любой полигон можно  представить в виде набора из координат его вершин. Координаты каждой вершины  представляют собой вектор (x, y, z). Умножив вектор на соответствующую матрицу,  мы получим новый вектор. Сделав такое преобразование со всеми вершинами  полигона, получим новый полигон, а преобразовав все полигоны, получим новый  объект, повёрнутый/сдвинутый/масштабированный относительно исходного.</li>
</ul>
<p>Ежегодно проходят конкурсы трёхмерной графики, такие как  Magick next-gen или Dominance War.<br>
  <strong>По динамике  изображения</strong> графика может быть:</p>
<ul>
  <li>статическая графика &ndash; компьютерная графика с неизменяющимися  картинками;</li>
  <li>компьютерная анимация &ndash; графика с изменяющимися 2-х и  3-х-мерными изображениями. Приложения, работающие с такой графикой можно  подразделить на: программы 2-х и 3-х-мерного моделирования; программы 2-х и  3-х-мерной анимации; презентационные пакеты.</li>
</ul>
<p><strong>По назначению</strong> см.  раздел 1.4. <br>
  <strong>В зависимости от  способа формирования</strong> изображений. Этот способ не только лежит в основе качества изображения,  выводимого на экран, но и определяет возможности редактирования и емкость  занимаемой при хранении изображения памяти, а также поведение графического  объекта при различных технических характеристиках монитора. По этому признаку  выделяют виды компьютерной графики: </p>
<ul>
  <li>растровую, </li>
  <li>векторную, </li>
  <li>фрактальную</li>
  <li>символьную.</li>
</ul>
<p><strong>Функции графических процессоров</strong><br>
  Не зависимо от  способа формирования изображения большинство графических процессоров  обеспечивают: создание и редактирование графических изображений;  цветокоррекцию, ретуширование; поддержку многослойной структуры изображения;  моделирование различных кистей (карандаш, рука, уголь, аэрограф, и др.) и материалов  (акварели, масла, натуральной среды, и др.); средства многоцветной градиентной  заливки и теневые эффекты; моделирование и деформация 2-х и 3-х-мерных  объектов; средства анимации; комбинацию видео и звуковых эффектов;  редактирование текста; и многое другое.</p>
<h2><a name="_Toc402445727"></a><a name="_Toc402404241">Области применения машинной графики. Программные  средства для работы с компьютерной графикой исходя из ее назначения</a></h2>
<p>Работа с компьютерной графикой - одно из самых популярных  направлений использования персонального компьютера, причем занимаются этой  работой не только профессиональные художники и дизайнеры. На любом предприятии  время от времени возникает необходимость в подаче рекламных объявлений в газеты  и журналы, в выпуске рекламной листовки или буклета. Иногда предприятия  заказывают такую работу специальным дизайнерским бюро или рекламным агентствам,  но часто обходятся собственными силами и доступными программными средствами.<br>
  Без компьютерной графики не обходится ни одна современная  программа. Работа над графикой занимает до 90% рабочего времени программистских  коллективов, выпускающих программы массового применения.<br>
  Основные трудозатраты в работе редакций и издательств тоже  составляют художественные и оформительские работы с графическими программами.<br>
  Необходимость широкого использования графических программных  средств стала особенно ощутимой в связи с развитием Интернета и, в первую  очередь, благодаря службе World Wide Web, связавшей в единую  &quot;паутину&quot; миллионы &quot;домашних страниц&quot;. У страницы,  оформленной без компьютерной графики мало шансов привлечь к себе массовое  внимание.<br>
  До недавнего времени экспериментирование по использованию  возможностей интерактивной машинной графики - возможностей, которые кажутся  магическими, - было привилегией лишь небольшой горстки специалистов,  преимущественно ученых и инженеров, занимающихся вопросами автоматизации  проектирования, анализа данных и математического моделирования. Теперь же  исследование реальных и воображаемых миров через &quot;призму&quot; компьютеров  стало доступно гораздо более широкому кругу людей.<br>
  Такое изменение ситуации обусловлено несколькими причинами.  Прежде всего, в результате резкого улучшения соотношения  стоимость/производительность для некоторых компонент аппаратуры компьютеров.  Кроме того, стандартное программное обеспечение высокого уровня для графики  стало широкодоступным, что упрощает написание новых прикладных программ,  переносимых с компьютеров одного типа на другие.<br>
  Следующая причина обусловлена влиянием, которое дисплеи  оказывают на качество интерфейса - средства общения между человеком и машиной,  - обеспечивая максимальные удобства для пользователя. Новые, удобные для  пользователя системы построены в основном на подходе WYSIWYG (аббревиатура от  английского выражения &quot;What you see is what you get&quot; - &quot;Что  видите, то и имеете&quot;), в соответствии с которым изображение на экране  должно быть, как можно более похожим на то, которое в результате печатается.<br>
  Большинство традиционных приложений машинной графики  являются двумерными. В последнее время, однако, отмечается возрастающий  коммерческий интерес к трехмерным приложениям. Он вызван значительным  прогрессом, достигнутым в прошлом десятилетии в решении двух взаимосвязанных  проблем: моделирования трехмерных сцен и построения как можно более  реалистичного изображения. Например, в имитаторах полета особое значение  придается времени реакции на команды, вводимые пилотом и инструктором. Чтобы  создавалась иллюзия плавного движения, имитатор должен порождать чрезвычайно  реалистичную картину динамически изменяющегося &quot;мира&quot; с частотой как  минимум 30 кадров в секунду. В противоположность этому изображения, применяемые  в рекламе и индустрии развлечений, вычисляют автономно, нередко в течении  часов, с целью достичь максимального реализма или произвести сильное  впечатление.<br>
  Существует аппаратное и программное обеспечение для  получения разнообразных изображений &ndash; от простых чертежей до реалистичных  образов естественных объектов. <br>
  <strong>Направления  компьютерной графики</strong><br>
  В нынешнем, устоявшемся состоянии принято разделять  компьютерную графику на следующие направления:</p>
<ul>
  <li>изобразительная компьютерная графика,</li>
  <li>обработка и анализ изображений,</li>
  <li>анализ сцен (перцептивная компьютерная графика),</li>
  <li>компьютерная графика для научных абстракций  (когнитивная компьютерная графика &ndash; графика, способствующая познанию).</li>
</ul>
<p>Изобразительная компьютерная графика работает с  синтезированными изображениями. Основными ее задачами являются:</p>
<ul>
  <li>построение модели объекта и генерация  изображения,</li>
  <li>преобразование модели и изображения,</li>
  <li>идентификация объекта и получение требуемой  информации.</li>
</ul>
<p>Объектами обработки и анализа изображений являются  дискретное, числовое представление фотографий. Можно выделить следующие  основные задачи данного направления:</p>
<ul>
  <li>повышение качества изображения,</li>
  <li>оценка изображения &ndash; определение формы,  местоположения, размеров и других параметров требуемых объектов,</li>
  <li>распознавание образов &ndash; выделение и  классификация свойств объектов (обработка аэрокосмических снимков, ввод  чертежей, системы навигации, обнаружения и наведения).</li>
</ul>
<p>Предметом анализа сцен являются исследования абстрактных  моделей графических объектов и взаимосвязей между ними. Объекты могут быть как  синтезированными, так и выделенными на фотоснимках. Основная задача анализа  сцен &ndash; выделение характерных особенностей, формирующих графические объекты.<br>
  Приложения компьютерной графики  очень разнообразны. Для каждого направления создается специальное программное  обеспечение, которое называют графическими программами, или графическими  пакетами. </p>
<h3><a name="_Toc402445728"></a><a name="_Toc402404242">Научная  графика</a></h3>
<p><strong>История научной  графики.</strong> Первые компьютеры использовались лишь для решения научных и производственных  задач. Чтобы лучше понять полученные результаты, производили их графическую  обработку, строили графики, диаграммы, чертежи рассчитанных конструкций. Первые  графики на машине получали в режиме символьной печати. Затем появились  специальные устройства - графопостроители (плоттеры) для вычерчивания чертежей  и графиков чернильным пером на бумаге. <br>
  Современная научная компьютерная графика дает возможность  проводить вычислительные эксперименты с наглядным представлением их результатов  (рисунок 2) и используется почти во всех научных и инженерных дисциплинах в  системах автоматизации научных исследований, системах автоматизации  проектирования, системах автоматизации конструирования, системах автоматизации  производства, автоматизированных системах управления технологическими  процессами, в схемотехнике, дизайне,  проектировании. В медицине  получение трехмерных изображений внутренних органов по данным компьютерных  томографов является обычным делом.</p>
<p align="center"><img width="278" height="229" src="lk1_clip_image001.png"></p>
<p align="center">Рисунок 2- Пример изображения  научной графики</p>
<h3><a name="_Toc402445729"></a><a name="_Toc402404243">Деловая  графика</a></h3>
<p>Область компьютерной графики, предназначенная для наглядного  представления различных показателей работы учреждений. Плановые показатели,  отчетная документация, статистические сводки - вот объекты, для которых с  помощью деловой графики создаются иллюстративные материалы. Программные  средства деловой графики включаются в состав электронных таблиц. В  бизнесе (в коммерческой и управленческой деятельности) используются построенные  с помощью компьютера схемы, графики, диаграммы, предназначенные для наглядного  отображения разнообразной информации (рисунок 3). Применение во время деловых  совещаний демонстрационных слайдов, подготовленных средствами машинной графики,  считается нормой.</p>
<p align="center"><img width="257" height="188" src="lk1_clip_image002.png"> <br>
  Рисунок 3- Пример изображения деловой графики</p>
<h3><a name="_Toc402445730"></a><a name="_Toc402404244">Конструкторская  графика</a>. Понятие интерактивной  графики как подсистемы САПР </h3>
<p>В случае, если пользователь может  управлять характеристиками объектов, то говорят об <strong>интерактивной</strong> компьютерной графике, т.е. способность компьютерной системы  создавать графику и вести диалог с человеком. В настоящее время почти любую  программу можно считать системой интерактивной компьютерной графики.<br>
  Интерактивная компьютерная  графика &ndash; это так же использование компьютеров для подготовки и воспроизведения  изображений, но при этом пользователь имеет возможность оперативно вносить  изменения в изображение непосредственно в процессе его воспроизведения, т.е.  предполагается возможность работы с графикой в режиме диалога в реальном  масштабе времени.<br>
  <strong>Интерактивная графика</strong> представляет собой важный раздел компьютерной  графики, когда пользователь имеет возможность динамически управлять содержимым  изображения, его формой, размером и цветом на поверхности дисплея с помощью  интерактивных устройств управления. <br>
  Исторически первыми  интерактивными системами считаются системы автоматизированного проектирования (<strong>САПР</strong>), которые появились в 60-х годах.  Они представляют собой значительный этап в эволюции компьютеров и программного  обеспечения. В системе интерактивной компьютерной графики пользователь  воспринимает на дисплее изображение, представляющее некоторый сложный объект, и  может вносить изменения в описание (модель) объекта. Такими изменениями могут  быть как ввод и редактирование отдельных элементов, так и задание числовых  значений для любых параметров, а также иные операции по вводу информации на  основе восприятия изображений.<br>
  Инженеры-конструкторы,  разрабатывая новые модели автомобилей и самолетов, используют трехмерные  графические объекты, чтобы представить окончательный вид изделия. Архитекторы  создают на экране монитора объемное изображение здания, и это позволяет им  увидеть, как оно впишется в ландшафт. Знание ее основ необходимо любому ученому  или инженеру. <br>
  Этот вид компьютерной графики является обязательным элементом  САПР. Средствами конструкторской графики можно получать как плоские изображения  (проекции, сечения), так и пространственные трехмерные изображения (рисунок 4).</p>
<div align="center">
  <table border="0" cellspacing="0" cellpadding="0">
    <tr>
      <td width="208" valign="top"><p><img width="338" height="262" src="lk1_clip_image003.png"></p></td>
      <td width="208" valign="top"><p>&nbsp;</p></td>
      <td width="208" valign="top"><p><img width="258" height="190" src="lk1_clip_image004.png"></p></td>
    </tr>
  </table>
</div>
<p align="center">Рисунок 4 - Пример изображения конструкторской графики</p>
<h3><a name="_Toc402445731"></a><a name="_Toc402404245">Художественная  и рекламная графика</a></h3>
<p>Данный вид графики стал популярным во многом  благодаря средствам массовой информации. С помощью компьютера создаются  рекламные ролики, клипы, мультфильмы, компьютерные видеоигры, видеоуроки,  видеопрезентации.&nbsp; Используется в  полиграфии и компьютерной живописи.<br>
  Графические пакеты для этих целей требуют  больших ресурсов компьютера по быстродействию и памяти. Отличительной  особенностью этих графических пакетов является возможность создания  реалистических изображений и &quot;движущихся картинок&quot;. Получение  рисунков трехмерных объектов, их повороты, приближения, удаления, деформации  связано с большим объемом вычислений. Передача освещенности объекта в  зависимости от положения источника света, от расположения теней, от фактуры  поверхности, требует расчетов, учитывающих законы оптики.</p>
<p align="center"><img width="201" height="147" src="lk1_clip_image005.jpg"><img width="193" height="146" src="lk1_clip_image006.png"> <br>
  Рисунок  5- Пример изображения рекламной графики</p>
<h3><a name="_Toc402445732"></a><a name="_Toc402404246">Иллюстративная  графика</a></h3>
<p>&nbsp;Иллюстративная графика - это произвольное  рисование и черчение на экране компьютера (рисунок 6). Пакеты иллюстративной  графики относятся к прикладному программному обеспечению общего назначения.  Простейшие программные средства иллюстративной графики называются графическими  редакторами.</p>
<p align="center"><img width="312" height="252" src="lk1_clip_image007.gif" alt="http://old.mkgt.ru/files/material-static/practicum/teoriya/01-07.gif"> <br>
  Рисунок 6- Пример изображения  иллюстративной графики</p>
<h3><a name="_Toc402445733"></a><a name="_Toc402404247">Компьютерная  анимация</a></h3>
<p>Компьютерная анимация - это получение движущихся изображений  на экране дисплее. Слово &laquo;анимация&raquo; означает &laquo;оживление&raquo;. В недавнем прошлом художники-мультипликаторы  создавали свои фильмы вручную. Чтобы передать движение, им приходилось делать  тысячи рисунков, отличающихся друг от друга небольшими изменениями. Затем эти  рисунки переснимались на кинопленку. Система компьютерной анимации берет значительную  часть рутинной работы на себя. Например, художник может создать на экране  рисунки лишь начального и конечного состояний движущегося объекта, а все  промежуточные состояния рассчитает и изобразит компьютер. Такая работа также  связана с расчетами, опирающимися на математическое описание данного типа  движения. Полученные рисунки, выводимые последовательно на экран с определенной  частотой, создают иллюзию движения (рисунок 7).</p>
<p align="center"><img width="244" height="183" src="lk1_clip_image009.jpg" alt="http://www.c-kurcy.ru/images/09.01.jpg"> <br>
  Рисунок  7- &laquo;Шагающий человек&raquo; - пример компьютерной анимации</p>
<h3><a name="_Toc402445734"></a><a name="_Toc402404248">Мультимедия</a></h3>
<p>Это объединение высококачественного изображения на экране  компьютера со звуковым сопровождением (рисунок 9). Наибольшее распространение  системы мультимедиа получили в области обучения, рекламы, развлечений.</p>
<ul>
  <li><img width="237" height="237" src="lk1_clip_image011.jpg" alt="Мультимедиа"></li>
  <li>&nbsp;</li>
</ul>
<p align="center">Рисунок 9 &ndash; Схематичное представление  мультимедиа</p>
<p><strong>Компьютерная графика как область научной деятельности</strong><br>
  Компьютерная графика  является также одной из областей научной деятельности. В области компьютерной  графики защищаются диссертации, а также проводятся различные конференции:</p>
<ul>
  <li>конференция Siggraph, проводится в США</li>
  <li>конференция Графикон, проводится в России</li>
  <li>CG-событие, проводится в России</li>
  <li>CG Wave, проводится в России</li>
</ul>
<p>На факультете ВМиК МГУ  существует лаборатория компьютерной графики. </p>
<h2><a name="_Toc402445735"></a><a name="_Toc402404250">Виды компьютерной графики в зависимости от  способа формирования изображений.</a></h2>
<h3><a name="_Toc402445736"></a><a name="_Toc402404251">Растровая графика. Пиксел. Глубина цвета</a>. Разрешение</h3>
<p><strong>Растровая графика</strong>- метод графического представления объекта в виде двумерного  массива (матрицы) точек, называемых пикселами. <br>
  <strong>Пиксел</strong> (от английского pixel -  picture element) - неделимая точка в графическом изображении; наименьший  адресуемый элемент растрового изображения. Размер экранного пикселя  приблизительно 0,0018 дюйма. Пиксел характеризуется прямоугольной формой и  размерами, определяющими пространственное разрешение изображения. Каждому  пикселю сопоставляется значение яркости, цвета, прозрачности &mdash; или комбинация  этих значений. Растровый образ имеет некоторое число строк и столбцов  (координаты).</p>
<p>&nbsp;</p>
<p><strong>Растровое изображение</strong> - изображение, сформированное из отдельных  пикселей, размещаемых по фиксированным  строкам (растрам). В нем содержатся цвета последовательности точек  (пикселей), одна за другой формирующих рисунок. Оно подобно мозаике - когда  приближаете (увеличиваете) его, то видите отдельные пиксели, а если удаляете (уменьшаете),  пиксели сливаются (рисунок 10). Тут каждый пиксель закрашен определенным  цветом. Этот цвет закрепляется за определенным местом экрана. Перемещение  фрагмента изображения &laquo;снимает&raquo; краску с электронного холста и разрушает  рисунок.</p>
<p align="center"><img width="245" height="175" src="lk1_clip_image002_0000.png" alt="иксели"><br>
  Рисунок 10 -  Схематичное представление растрового изображения</p>
<p>В растровом виде представимо любое изображение, однако этот  способ хранения имеет свои недостатки: </p>
<ul>
  <li>больший объём дисковой и оперативной памяти (т.к. при хранении и обработке изображения  кодируется каждый пиксель), необходимый для работы с изображениями;</li>
  <li>потери  при редактировании: качество  растрового изображения зависит от разрешающей способности экрана (например,  800х600 или 1152х864 пикселей). При изменении разрешающей способности  изображение может искажаться.</li>
</ul>
<p>При преобразовании растровой картинки исходными данными  является только описание набора пикселей, поэтому возникает проблема замены  меньшего числа пикселей на большее (при увеличении, или большего на меньшее  (при уменьшении). <br>
  Без особых потерь растровые изображения можно только лишь  уменьшать, хотя некоторые детали изображения тогда исчезнут навсегда, что иначе  в векторном представлении. Для уменьшения изображения приходится несколько  соседних точек преобразовывать в одну или выбрасывать лишние точки. В  результате изображение искажается: его мелкие детали становятся неразборчивыми  (или могут вообще исчезнуть), картинка теряет четкость (рисунок 11).</p>
<div align="center">
  <table border="0" cellspacing="0" cellpadding="0">
    <tr>
      <td width="311" valign="top"><p align="center"><img width="234" height="176" src="lk1_clip_image003.jpg"></p></td>
      <td width="312" valign="top"><p align="center"><img width="217" height="178" src="lk1_clip_image004.jpg"></p></td>
    </tr>
  </table>
</div>
<p>&nbsp;</p>
<p align="center">Рисунок 11 &ndash; Растровое  изображение, масштабированное с потерей качества</p>
<p>Увеличение же растровых изображений оборачивается &laquo;красивым&raquo;  видом на увеличенные квадраты того или иного цвета, которые раньше были  пикселями. В итоге изображение получается ступенчатым, зернистым. </p>
<p>Простейшим способом является замена одного пикселя  несколькими того же цвета (метод копирования ближайшего пикселя: Nearest  Neighbour). Более совершенные методы используют алгоритмы интерполяции, при  которых новые пиксели получают некоторый цвет, код которого вычисляется на основе  кодов цветов соседних пикселей. Подобным образом выполняется масштабирование в  программе Adobe Photoshop (билинейная и бикубическая интерполяция).<br>
  Растровое изображение нельзя расчленить. Оно &laquo;литое&raquo;,  состоит из массива точек. Поэтому в программах для обработки растровой графики  предусмотрен ряд инструментов для выделения элементов &laquo;вручную&raquo;. <br>
  Большинство графических редакторов, предназначенных для  работы с растровыми иллюстрациями, ориентированы не столько на создание  изображений, сколько на их обработку (редактирование). <br>
  В Интернете пока применяются только растровые иллюстрации в форматах .gif и .jpg. <br>
  Распространённые программы для работы с растровой графикой: </p>
<ul>
  <li>Paint; </li>
  <li>Microsoft  PhotoEditor; </li>
  <li>Adobe  PhotoShop; </li>
  <li>Fractal  Design Painter; </li>
  <li>Micrografx  Picture Publisher&hellip; </li>
</ul>
<p>Растровая графика применяется для обработки изображений,  требующей высокой точности передачи оттенков цветов и плавного перетекания  полутонов: </p>
<ul>
  <li>ретуширования, реставрирования фотографий; </li>
  <li>при разработке электронных (мультимедийных) и полиграфических  изданий; </li>
</ul>
<ul>
  <li>создания и обработки фотомонтажа, коллажей; </li>
  <li>для применения к изображениям различных  спецэффектов; </li>
</ul>
<p>Чаще всего для этой цели используют отсканированные  иллюстрации (они получаются в растровом виде, чаще в формате .tiff,), подготовленные художниками, или  фотографии. В последнее время для ввода растровых изображений в компьютер нашли  широкое применение цифровые фото- и видеокамеры.<br>
  Самыми близкими  аналогами растровой графики является живопись,&nbsp;  фотография. В связи с этим соответствующие программы можно отнести к  средствам компьютерной живописи.</p>
<h4><strong>Кодирование  графической информации. Глубина цвета. Разрешение</strong></h4>
<p>Информация о текущем состоянии экрана хранится в памяти  видеокарты &ndash; специального устройства компьютера. <br>
  Графическая информация (цвет, координаты) может храниться и  в памяти компьютера - в <strong>графическом  файле данных</strong>, и тогда мы имеем дело с растровой графикой. <br>
  Растровые файлы имеют сравнительно большой размер, т.к.  компьютер хранит параметры всех точек  изображения. Поэтому размер файла зависит от следующих характеристик:</p>
<ul>
  <li>размер изображения &mdash; количество видеопикселей в рисунке по горизонтали и  вертикали</li>
  <li>битовая глубина &mdash; число битов, используемых для хранения цвета одного  видеопикселя</li>
  <li>данные, описывающие рисунок (цвет каждого видеопикселя рисунка), а также  некоторая дополнительная информация.</li>
</ul>
<p>В файлах растровой  графики разных форматов эти характеристики хранятся различными способами.<br>
  Поскольку размер  изображения хранится в виде отдельной записи, цвета всех видеопикселей рисунка  запоминаются как один большой блок данных. Пример как сохраняется в растровом  файле простое чёрно-белое изображение показан на рисунке 12.</p>
<p align="center"><img width="669" height="89" src="lk1_clip_image005.gif" alt="http://www.mkgt.ru/files/material-static/practicum/teoriya/03-02.GIF"> <br>
  Рисунок 12 -<strong> </strong>Сохранение в растровом файле информации о цвете  каждого видеопикселя<br>
  На рисунке 13  показан результат восстановления изображения по информации, сохранённой в  растровом файле, представленном на рисунке 14. В изображении, восстановленном  по файлу, видеопиксели располагаются согласно размеру изображения; а именно,  сначала &mdash; первая десятка видеопикселей, в следующей строке &mdash; вторая десятка и  т. д., в десятой строке &mdash; последние десять видеопикселей.<br>
  <img width="319" height="196" src="lk1_clip_image006.gif" alt="http://www.mkgt.ru/files/material-static/practicum/teoriya/03-03.GIF"> <br>
  Рисунок 14 -<strong> </strong>Растровый рисунок, восстановленный по  файлу растровой графики<br>
  Легко описать векторное представление  рисунка 13:<br>
  <strong>Установить</strong><strong>&nbsp;</strong>0,3<br>
  <strong>Линия к</strong><strong>&nbsp;</strong>3, 0<br>
  <strong>Линия к</strong><strong>&nbsp;</strong>5, 0<br>
  <strong>Линия к</strong><strong>&nbsp;</strong>8, 3<br>
  <strong>Линия к</strong><strong>&nbsp;</strong>8, 5<br>
  <strong>Линия к</strong><strong>&nbsp;</strong>5, 8<br>
  <strong>Линия к</strong><strong>&nbsp;</strong>3, 8<br>
  <strong>Линия к</strong><strong>&nbsp;</strong>0, 5<br>
  <strong>Линия к</strong><strong>&nbsp;</strong>0, 3.<br>
  Каждая точка представляется определенным количеством бит (в  зависимости от <strong>глубины цвета</strong>,  рисунок 15). При открытии файла программа прорисовывает такую картину как последовательность  точек массива.</p>
<p align="center"><img width="500" height="111" src="lk1_clip_image007.png" alt="http://www.rusedu.info/upload/rte/skorodnoe_21.png"></p>
<p align="center">Рисунок 15 &ndash; Таблица  &laquo;Глубина цвета&raquo;</p>
<p><strong>Код  пикселя - </strong>это информация о цвете пикселя. <br>
  <strong>Глубина цвета</strong> &ndash; количество  бит, используемых для указания цвета пикселя:</p>
<p>- в черно-белом без полутонов- 1 бит (может быть только два  цвета 21=2:  два состояния:  светится (белый), не светится (черный).) <br>
  - в полутоновом - 8 бит <br>
  - в цветном - 24 (32) бита на хранение цвета каждой точки, 224 &raquo; 6,7&nbsp;млн. цветов. На <strong>цветном</strong> экране все разнообразие красок  получается из сочетаний трех базовых цветов: красного, зеленого, синего. Из  трех цветов можно получить 8 комбинаций. В этом случае для кодирования  состояния одного пикселя потребуется 3 бита памяти.<br>
  Шестнадцатицветная палитра получается при использовании  четырехразрядной кодировки пикселя: к трем битам базовых цветов добавляется бит  интенсивности (таблица). Этот бит управляет яркостью всех трех цветов  одновременно.</p>
<p>Таблица</p>
<table border="1" cellpadding="0" width="98%">
  <tr>
    <td width="10%"><br>
      <strong>И</strong></td>
    <td width="10%"><p align="center"><strong>К</strong></p></td>
    <td width="10%"><p align="center"><strong>З</strong></p></td>
    <td width="10%"><p align="center"><strong>С</strong></p></td>
    <td width="40%"><p align="center"><strong>Цвет</strong></p></td>
    <td width="20%"></td>
  </tr>
  <tr>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="40%"><p align="center">черный</p></td>
    <td width="20%"></td>
  </tr>
  <tr>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="40%"><p align="center">синий</p></td>
    <td width="20%"></td>
  </tr>
  <tr>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="40%"><p align="center">зеленый</p></td>
    <td width="20%"></td>
  </tr>
  <tr>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="40%"><p align="center">темно-голубой</p></td>
    <td width="20%"></td>
  </tr>
  <tr>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="40%"><p align="center">темно-красный</p></td>
    <td width="20%"></td>
  </tr>
  <tr>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="40%"><p align="center">пурпурный</p></td>
    <td width="20%"></td>
  </tr>
  <tr>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="40%"><p align="center">оливковый</p></td>
    <td width="20%"></td>
  </tr>
  <tr>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="40%"><p align="center">светло-серый</p></td>
    <td width="20%"></td>
  </tr>
  <tr>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="40%"><p align="center">серый</p></td>
    <td width="20%"></td>
  </tr>
  <tr>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="40%"><p align="center">ярко-синий</p></td>
    <td width="20%"></td>
  </tr>
  <tr>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="40%"><p align="center">ярко-зеленый</p></td>
    <td width="20%"></td>
  </tr>
  <tr>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="40%"><p align="center">ярко-голубой</p></td>
    <td width="20%"></td>
  </tr>
  <tr>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="40%"><p align="center">ярко-красный</p></td>
    <td width="20%"></td>
  </tr>
  <tr>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="40%"><p align="center">розовый</p></td>
    <td width="20%"></td>
  </tr>
  <tr>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">0</p></td>
    <td width="40%"><p align="center">желтый</p></td>
    <td width="20%"></td>
  </tr>
  <tr>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="10%"><p align="center">1</p></td>
    <td width="40%"><p align="center">белый</p></td>
    <td width="20%"></td>
  </tr>
</table>
<p>&nbsp;</p>
<p>16 цветов - минимальное требование операционной системы  Windows. Обычно с 16 цветами не работают. Исключение составляют некоторые  ремонтные и наладочные работы, когда другие режимы не удается использовать по  техническим причинам.<br>
  Современные компьютеры, как правило, используют цветовое <strong>разрешение</strong> True Color. В этом режиме на  кодирование цвета одного пикселя выделяется 24 бита (3 байта). При этом можно  передать до 16777216 цветов, что соответствует возможностям человеческого  глаза, но требует большого объёма видеопамяти. В видеопамяти хранится  информация о цвете каждой точки экрана. Чем больше количество различных цветов  использовать, тем больший объем видеопамяти потребуется.<br>
  Если возможности видеокарты ограничены, применяют  промежуточный режим High Color. В этом режиме возможна передача до 65536  цветов.<br>
  Число цветов, воспроизводимых на экране дисплея (К), и число бит, отводимых в  видеопамяти под каждый пиксель (N),  связаны формулой:</p>
<table border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td width="567" valign="top"><p align="center">K=2N</p></td>
    <td width="56" valign="top"><p align="center">&nbsp;</p></td>
  </tr>
</table>
<p>Для получения  богатой палитры цветов базовым цветам могут быть заданы различные  интенсивности. Например, при глубине цвета в 24 бита на каждый из цветов  выделяется по 8 бит, т.е. для каждого из цветов возможны K = 28 = 256 уровней интенсивности.<br>
  <strong>Пример 1</strong>. Сколько бит видеопамяти занимает информация  об одном пикселе на черно-белом экране (без полутонов)?<br>
  <strong><em>Решение.</em></strong> Для черно-белого изображения без  полутонов K = 2.  Следовательно, 2N = 2. Отсюда N = 1 бит на пиксель.<br>
  Величину N  называют битовой глубиной.<br>
  Страница - раздел видеопамяти, вмещающий информацию об одном  образе экрана (одной &laquo;картинке&raquo; на экране). В видеопамяти одновременно могут  размещаться несколько страниц.<br>
  <strong>Пример 2.</strong> На экране с разрешающей способностью 800 х  600 высвечиваются только двухцветные изображения. Какой минимальный объем  видеопамяти необходим для хранения изображения?<br>
  <strong><em>Решение. </em></strong>Так как битовая глубина двухцветного  изображения равна 1, а видеопамять, как минимум, должна вмещать одну страницу  изображения, то объем видеопамяти равен<br>
  800 * 600 * 1 = 480000 бит = 60000 байт.<br>
  <strong>Пример 3</strong>. Какой объем видеопамяти необходим для  хранения двух страниц изображения при условии, что разрешающая способность  дисплея равна 640 х 350 пикселей, а количество используемых цветов - 16?<br>
  Решение. 640 * 350 * 4 * 2 = 1792000 бит = 218,75 Кбайт<br>
  Количество используемых цветов - 16, это 24,  значит, битовая глубина цвета равна 4.<br>
  2 - количество страниц.<br>
  <strong>Страница</strong>- раздел видеопамяти, вмещающий информацию об  одном образе экрана (одной картинке на экране). В видеопамяти могут размещаться  одновременно несколько страниц.<br>
  Объем видеопамяти <em>(V)</em> определяется по формуле:</p>
<table border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td width="567" valign="top"><p align="center">V=n*M*N*.b,</p></td>
    <td width="56" valign="top"><p align="center">(2)</p></td>
  </tr>
</table>
<p>где n- число  страниц,<br>
  M- количество пикселей в строке,<br>
  N- количество строк,<br>
  b- битовая глубина.<br>
  В  файле, содержащем растровую графику, хранится информация о цвете каждого  пиксела данного изображения. Чем меньше прямоугольники, на которые разбивается  изображение, тем больше <strong>разрешение</strong> (resolution), то есть, тем более мелкие детали можно закодировать в таком  графическом файле.<br>
  <strong>Размер</strong> (size) изображения, хранящегося в файле, задается в виде числа пикселов по  горизонтали (width) и вертикали (height). Для примера, оптимальное разрешение  15-дюймового монитора, как правило, составляет 1024x768.<br>
  <strong>Разрешение</strong> &ndash; количество некоторых  единиц изображения на единицу егол размера. Необходимо различать разрешение  изображения, экрана и печатающего устройства. Разрешение изображения задаётся  при его создании, измеряется в пикселях на дюйм (ppi &ndash; pixel per inch). <br>
  Некоторые часто используемые значения:</p>
<ul>
  <li>72 ppi &ndash; для вывода на экран;</li>
  <li>150 ppi &ndash; среднее качество печати;</li>
  <li>300&hellip;600 ppi &ndash; высококачественная печать.</li>
</ul>
<p>Например, если сканируется лист формата A4, размером 8,26&acute;11,69  дюймов с разрешением 600 ppi, то изображение будет содержать 8,26&acute;11,69&acute;600&acute;600 &raquo; 34  61 300 пикселей.<br>
  Размер изображения в байтах может быть рассчитан по формуле:</p>
<table border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td width="623" valign="top"><p align="center"><img width="171" height="49" src="lk1_clip_image009.png">, байт,</p></td>
  </tr>
</table>
<p>где A и B &ndash; размеры изображения, мм  (25,4 &ndash; перевод в дюймы);<br>
  D &ndash; разрешение, ppi;<br>
  C &ndash; глубина цвета, бит.<br>
  Например, лист формата А4 с разрешением 600 и глубиной 24:</p>
<div align="center">
  <table border="0" cellspacing="0" cellpadding="0">
    <tr>
      <td width="623" valign="top"><p align="center"><img width="189" height="49" src="lk1_clip_image011.png">&nbsp;&raquo; 102 Мбайт,</p></td>
    </tr>
  </table>
</div>
<p>Разрешение экрана &ndash; 72 ppi, 96 ppi.<br>
  Разрешение печатающего устройства &ndash; от 600&nbsp;dpi до 2800 &nbsp;dpi  (точек на дюйм). При этом обеспечивается хорошее качество печати для изображений  с разрешением 150&nbsp;ppi. Разрешение типографских фотонаборных машин (imagesetter)  &ndash; 1200...1500 dpi.</p>
<h3><a name="_Toc402445737"></a><a name="_Toc402404252">Векторная графика</a>. Геометрические примитивы</h3>
<p>Если в растровой графике базовым элементом изображения  является точка, то в <strong>векторной графике</strong> &ndash; линия.<br>
  <strong>Линия</strong> на экране воспроизводится совокупностью  точек, однако строится она по вычисленным координатам (вычисляемая графика),  отталкиваясь от координат ее начала и конца. Поэтому для хранения изображения  здесь требуется меньше памяти, чем в растровой графике (в памяти хранится не  код каждой точки, а параметры каждой построенной линии). Как и любой объект, линия обладает  свойствами: формой (прямая, кривая), толщиной, цветом, начертанием (сплошная,  пунктирная). Замкнутые линии приобретают свойство заполнения. Охватываемое ими  пространство может быть заполнено другими объектами (текстуры, карты) или  выбранным цветом. <br>
  При векторном, рисунок  представляется в виде комбинации простых геометрических фигур, называемых <strong>геометрическими</strong> <strong>примитивами</strong> - точек, линий, отрезков прямых и кривых, окружностей,  прямоугольников, закрашенных областей, а также, как общий случай, кривые  некоторого порядка. Объектам присваиваются некоторые атрибуты, например, толщина  линий, цвет заполнения.Границы областей задаются кривыми. <br>
  Простейшая  незамкнутая линия ограничена двумя точками, именуемыми <strong>узлами</strong>. Узлы также имеют свойства, параметры которых влияют на  форму конца линии и характер сопряжения с другими объектами. Все прочие объекты  векторной графики составляются из линий. Например, куб можно составить из шести  связанных прямоугольников, каждый из которых, в свою очередь, образован  четырьмя связанными линиями. Возможно, представить куб и как двенадцать  связанных линий, образующих ребра. <br>
  <strong>Векторный метод</strong>- это метод представления изображения  в виде совокупности отрезков и дуг и т. д. В данном случае <strong>вектор </strong>- это набор данных,  характеризующих какой-либо объект.<br>
  Есть несколько  способов построить векторные изображения, наиболее известный из них&nbsp;&ndash;  кривые Безье.</p>
<p align="center"><img src="Bezie.png" width="277" height="182" alt=""/><br>
  Рисунок 16 &ndash; Кривая  Безье</p>
<p>Компьютер хранит  элементы изображения (линии, кривые, фигуры) в виде математических формул, как  набор координат, векторов и других чисел, характеризующих набор примитивов. При открытии файла программа прорисовывает  элементы изображения по их математическим формулам (уравнениям). При  воспроизведении перекрывающихся объектов имеет значение их порядок.</p>
<p align="center"><img width="202" height="161" src="lk1_clip_image003_0000.jpg" alt="http://art-apple.ru/albums/vector_new_year/SnowmanVector.jpg"> <br>
  Рисунок 17 - Изображение  в векторном формате</p>
<p>Изображение в  векторном формате (рисунок 17) даёт простор для редактирования. Векторное  изображение можно расчленить на отдельные элементы (линии или фигуры), и каждый  редактировать, трансформировать независимо. Изображение может без потерь  масштабироваться (параметры примитивов просто умножаются на коэффициент  масштабирования), поворачиваться, деформироваться, также имитация трёхмерности  в векторной графике проще, чем в растровой. Дело в том, что каждое такое  преобразование фактически выполняется так: старое изображение (или фрагмент)  стирается, и вместо него строится новое. Математическое описание векторного  рисунка остаётся прежним, изменяются только значения некоторых переменных,  например, коэффициентов. Изменение размера или угла наклона линии не  ведет к изменению занимаемой ею памяти. <br>
  Векторные файлы  имеют сравнительно небольшой размер, т.к. компьютер запоминает только начальные  и конечные координаты элементов изображения -этого достаточно для описания  элементов в виде математических формул. Размер файла как правило не зависит от  размера изображаемых объектов, но зависит от сложности изображения: количества  объектов на одном рисунке (при большем их числе компьютер должен хранить больше  формул для их построения), характера заливки - однотонной или градиентной) и  пр. Понятие &laquo;разрешение&raquo; не применимо к векторным изображениям.<br>
  Векторные  изображения: более схематичны, менее реалистичны, чем растровые изображения,  &laquo;не фотографичны&raquo;.<br>
  Близкими аналогами  являются слайды мультфильмов, представление математических функций на графике. Например,  для описания отрезка прямой достаточно указать координаты его концов, а  окружность можно описать, задав координаты центра и радиус.<br>
  Программные средства  для работы с векторной графикой предназначены в первую очередь для создания  иллюстраций и в меньшей степени для их обработки. Такие средства широко  используют в рекламных агенствах, дизайнерских бюро, редакциях и издательствах.  Оформительские работы, основанные на применении шрифтов и простейших  геометрических элементов, решаются средствами векторной графики много проще. Для  получения векторных изображений используются программы иллюстративной графики<strong>, </strong>которые широко применяются в области  дизайна, технического рисования, оформительских работ, в  редакционной, оформительской, чертежной, проектно-конструкторской работе, в  картографии. </p>
<ul>
  <li>Corel  Draw </li>
  <li>Adobe  Illustrator </li>
  <li>Fractal  Design Expression </li>
  <li>Macromedia  Freehand </li>
  <li>AutoCAD </li>
</ul>
<p>Элементы векторной графики имеются также в программе MS Word. В этих программах  одновременно с инструментами рисования и командами предусмотрено специальное  программное обеспечение, формирующее векторные команды, соответствующие  объектам, из которых состоит рисунок.</p>
<p align="left"><strong>Применение</strong>: </p>
<ul>
  <li>для  создания вывесок, этикеток, логотипов, эмблем и пр. символьных изображений; </li>
  <li>для  построения чертежей, диаграмм, графиков, схем; </li>
  <li>для  рисованных изображений с четкими контурами, не обладающих большим спектром оттенков  цветов; </li>
  <li>для  моделирования объектов изображения; </li>
  <li>для  создания 3-х мерных изображений; </li>
</ul>
<p><strong>Векторный файл</strong>, отображающий векторное изображение, содержит  начальные координаты и параметры примитивов &ndash; векторные команды. Т.е. для  полного описания рисунка необходимо знать вид и базовые координаты каждой  фигуры, например, координаты двух концов отрезка, координаты центра и диаметр  окружности и т. д. Этот способ кодирования идеально подходит для рисунков,  которые легко представить в виде комбинации простейших фигур, например, для  технических чертежей. Кроме того, в векторных  файлах хранится некоторая дополнительная информация. <br>
  Различные векторные форматы отличаются набором векторных команд и способом  их кодирования.<br>
  <strong>Векторные команды</strong> сообщают устройству вывода о том, что необходимо нарисовать объект, используя  заложенное число элементов-примитивов. Чем больше элементов используется, тем  лучше этот объект выглядит.<br>
  В качестве примера рассмотрим описание простого рисунка в виде  последовательности векторных команд. Пусть в вашем распоряжении имеются  следующие векторные команды:<br>
  <strong>Установить </strong><strong>X</strong><strong>, </strong><strong>Y</strong>&mdash; установить в качестве текущей позицию ( X, Y ).<br>
  <strong>Линия к </strong><strong>X</strong><strong> </strong><strong>I</strong><strong>, </strong><strong>Y</strong><strong> 1</strong>&mdash; нарисовать линию от текущей позиции  до позиции ( X I, Y 1), при этом позиция  ( X I, Y 1) становится  текущей.<br>
  <strong>Линия </strong><strong>X</strong><strong> </strong><strong>I</strong><strong>, </strong><strong>Y</strong><strong> </strong><strong>l</strong><strong>, </strong><strong>X</strong><strong> 2, </strong><strong>Y</strong><strong> 2</strong>&mdash; нарисовать линию с координатами её начала ( X I, Y 1) и координатами конца (Х 2 , Y 2), при этом текущая позиция не устанавливается.<br>
  <strong>Окружность </strong><strong>X</strong><strong>, </strong><strong>Y</strong><strong>, &lt;радиус&gt;</strong>&mdash; нарисовать  окружность, где ( X, Y ) &mdash; координаты центра, &lt;радиус&gt; &mdash; радиус в  пикселях.<br>
  <strong>Эллипс </strong><strong>X</strong><strong> </strong><strong>1,</strong><strong>Y</strong><strong> </strong><strong>1, </strong><strong>X</strong><strong> </strong><strong>2, </strong><strong>Y</strong><strong> </strong><strong>2 </strong>&mdash; нарисовать эллипс, ограниченный прямоугольником, где (X I, Y 1) &mdash; координаты  левого верхнего угла этого прямоугольника, a (X 2, Y 2) &mdash; правого нижнего.<br>
  <strong>Прямоугольник</strong><strong>&nbsp;X&nbsp;</strong><strong>1,</strong><strong>&nbsp;Y&nbsp;</strong><strong>1,</strong><strong>&nbsp;X&nbsp;</strong><strong>2,</strong><strong>&nbsp;Y&nbsp;</strong><strong>2</strong><strong>&nbsp;</strong>&mdash; нарисовать прямоугольник, где ( X I , Y 1) &mdash; координаты левого верхнего угла этого  прямоугольника, а (Х 2, Y 2) &mdash; правого  нижнего.<br>
  <strong>Цвет рисования &lt;цвет&gt; </strong>&mdash; установить текущий цвет рисования&nbsp;<strong>&lt;цвет&gt;.</strong> <br>
  <strong>Цвет закраски &lt;цвет&gt; </strong>&mdash; установить текущий цвет закраски&nbsp;<strong>&lt;цвет&gt;.</strong> <br>
  <strong>Закрасить </strong><strong>X</strong><strong>, </strong><strong>Y</strong><strong>, &lt;цвет границы&gt;</strong><strong>&nbsp;</strong>&mdash; закрасить произвольную замкнутую фигуру, где (X, Y) &mdash; координаты любой  точки внутри замкнутой фигуры,&nbsp;<strong>&lt;цвет границы&gt;</strong><strong>&nbsp;</strong>&mdash; цвет граничной линии.<br>
  Требуется описать с помощью векторных команд  изображение кораблика (рисунок 18).<br>
  Координаты рисунка задаются в прямоугольной  декартовой системе координат, начало которой находится в верхнем левом углу.<br>
  <u>Решение:</u> <br>
  <strong>Цвет рисования</strong><strong>&nbsp;</strong>Голубой<br>
  <strong>Установить</strong><strong>&nbsp;</strong>270 ,1 00<br>
  <strong>Линия к</strong><strong>&nbsp;</strong>440, 100<br>
  <strong>Линия к</strong><strong>&nbsp;</strong>400, 140<br>
  <strong>Линия к</strong><strong>&nbsp;</strong>310<strong>,</strong><strong>&nbsp;</strong>140<br>
  <strong>Линия к</strong><strong>&nbsp;</strong>270, 100<br>
  <strong>Цвет закраски</strong><strong>&nbsp;</strong>Голубой<br>
  <strong>Закрасить</strong><strong>&nbsp;</strong>320, 130, Голубой<br>
  <strong>Цвет рисования</strong><strong>&nbsp;</strong>Белый<br>
  <strong>Цвет закраски</strong><strong>&nbsp;</strong>Белый<br>
  <strong>Окружность</strong><strong>&nbsp;</strong>310, 120, 5<br>
  <strong>Закрасить 310,120,</strong><strong>&nbsp;</strong>Белый<br>
  <strong>Окружность</strong><strong>&nbsp;</strong>350, 120, 5<br>
  <strong>Закрасить</strong><strong>&nbsp;</strong>350,120, Белый<br>
  <strong>Окружность</strong><strong>&nbsp;</strong>400,120, 5<br>
  <strong>Закрасить</strong><strong>&nbsp;</strong>400,120, Белый<br>
  <strong>Цвет рисования</strong><strong>&nbsp;</strong>Синий<br>
  <strong>Цвет закраски</strong><strong>&nbsp;</strong>Красный<br>
  <strong>Установить</strong><strong>&nbsp;</strong>300,100<br>
  <strong>Линия</strong><strong>&nbsp;</strong>к 340, 20<br>
  <strong>Линия</strong><strong>&nbsp;</strong>к 340,100<br>
  <strong>Линия к</strong><strong>&nbsp;</strong>300,100<br>
  <strong>Закрасить</strong><strong>&nbsp;</strong>320,90, Синий<br>
  <strong>Цвет рисования</strong><strong>&nbsp;</strong>Коричневый<br>
  <strong>Установить</strong><strong>&nbsp;</strong>340, 20<br>
  <strong>Линия к</strong><strong>&nbsp;</strong>340,100<br>
  <strong>Линия</strong><strong>&nbsp;</strong>к 400, 100<br>
  <strong>Линия</strong><strong>&nbsp;</strong>к 340,20<br>
  <strong>Цвет закраски</strong><strong>&nbsp;</strong>Белый<br>
  <strong>Закрасить&nbsp;</strong>390, 90,  Коричневый<br>
  <img width="519" height="342" src="lk1_clip_image004.gif" alt="http://www.mkgt.ru/files/material-static/practicum/teoriya/03-01.GIF"> <br>
  Рисунок 18 &ndash; Описание изображения с помощью  векторных команд<br>
  Файлы векторной графики могут содержать растровые объекты.<br>
  <strong>Достоинства векторной  графики</strong></p>
<ul>
  <li>Векторные изображения занимают относительно  небольшой объем памяти.</li>
  <li>Векторные объекты могут легко масштабироваться  без потери качества </li>
</ul>
<p><strong>Недостатки векторной  графики</strong></p>
<ul>
  <li>Векторная графика не позволяет получать  изображения фотографического качества. </li>
  <li>Векторные изображения описываются тысячами  команд. В процессе печати эти команды передаются устройству вывода (принтеру).  Чаще всего изображение на бумаге выглядит не так как на экране монитора. </li>
</ul>
<p>Естественным  развитием векторной графики стала <strong>объектно-ориентированная  графика</strong>. В ней расширился перечень и свойства основных элементов  (примитивов), например, при редактировании изображения можно изменить  (перенести, повернуть и др.) любой примитив; при масштабировании объекты не  искажаются.</p>
<table border="1" cellpadding="0" width="98%">
  <tr>
    <td colspan="3"><p align="center"><strong>Сравнение растровой и векторной графики</strong></p></td>
  </tr>
  <tr>
    <td><p align="center"><strong>Критерий сравнения</strong></p></td>
    <td><p align="center"><strong>Растровая графика</strong></p></td>
    <td><p align="center"><strong>Векторная графика</strong></p></td>
  </tr>
  <tr>
    <td><p>Способ представления    изображения</p></td>
    <td><p>Растровое изображение    строится из множества пикселей.</p></td>
    <td><p>Векторное изображение    описывается в виде последовательности команд.</p></td>
  </tr>
  <tr>
    <td><p>Представление объектов    реального мира</p></td>
    <td><p>Растровые рисунки    эффективно используются для представления реальных образов.</p></td>
    <td><p>Векторная графика не    позволяет получать изображения фотографического качества.</p></td>
  </tr>
  <tr>
    <td><p>Качество редактирования    изображения</p></td>
    <td><p>При масштабировании и    вращении растровых картинок возникают искажения.</p></td>
    <td><p>Векторные изображения могут    быть легко преобразованы без потери качества.</p></td>
  </tr>
  <tr>
    <td><p>Особенности печати    изображения</p></td>
    <td><p>Растровые рисунки могут    быть легко напечатаны на принтерах.</p></td>
    <td><p>Векторные рисунки иногда не    печатаются или выглядят на бумаге не так, как хотелось бы.</p></td>
  </tr>
</table>
<h3><a name="_Toc402445738"></a><a name="_Toc402404253">Фрактальная графика</a></h3>
<p><strong>Фрактал</strong>- объект,  отдельные элементы которого наследуют свойства родительских структур. Это структура,  состоящая из частей, подобных целому. Одним из основных свойств является самоподобие.  (Фрактус &ndash; состоящий из фрагментов). Объекты называются самоподобными, когда  увеличенные части объекта походят на сам объект. Небольшая часть фрактала  содержит информацию обо всем фрактале. Фракталы позволяют описывать целые  классы изображений, для детального описания которых требуется относительно мало  памяти. С другой стороны, фракталы слабо применимы к изображениям вне этих  классов.</p>
<p>&nbsp;</p>
<table border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td width="311" valign="top"><p align="center"><img width="193" height="156" src="lk1_clip_image001_0001.png"></p></td>
    <td width="312" valign="top"><p align="center"><img width="203" height="150" src="lk1_clip_image002_0001.png"></p></td>
  </tr>
</table>
<p align="center">Рисунок 19 &ndash;  Наглядное представление фрактала</p>
<p>&nbsp;</p>
<p>Поскольку более детальное описание элементов меньшего  масштаба происходит по простому алгоритму, описать такой объект можно всего  лишь несколькими математическими уравнениями. Следовательно, математическая  основа фрактальной графики - фрактальная геометрия.<br>
  Любой микроскопический фрагмент фрактала (рисунок 20) в том  или ином отношении воспроизводит его глобальную структуру. В простейшем случае  часть фрактала представляет собой просто уменьшенный целый фрактал.</p>
<p align="center"><img width="182" height="192" src="lk1_clip_image003_0000.png"><br>
  Рисунок 21 -  Фрагменты фрактала</p>
<p>Отсюда основной рецепт построения фракталов: возьми простой  мотив и повторяй его, постоянно уменьшая размеры. В конце концов выйдет  структура, воспроизводящая этот мотив во всех масштабах, - бесконечная лестница  вглубь.<br>
  Берем отрезок и среднюю его треть переламываем под углом 60  градусов. Затем повторяем эту операцию с каждой из частей получившейся ломаной  - и так до бесконечности. В результате мы получим простейший фрактал - триадную  кривую, которую в 1904 году открыла математик Хельга фон Кох.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
  Если на каждом шаге не только уменьшать основной мотив, но  также смещать и поворачивать его, можно получить более интересные и  реалистически выглядящие образования, например, лист папоротника или даже целые  их заросли. А можно построить весьма правдоподобный фрактальный рельеф  местности и покрыть её очень симпатичным лесом (рисунок 22).</p>
<p align="center"><img width="298" height="202" src="lk1_clip_image004_0000.jpg"><br>
  Рисунок 22 -  Фрактальный рельеф местности</p>
<p>Программные средства для работы с фрактальной графикой  предназначены для автоматической генерации изображений путем математических  расчетов. Создание фрактальной художественной композиции состоит не в рисовании  или оформлении, а в программировании.<br>
  <strong>Фрактальная графика,</strong> как и векторная - вычисляемая, но  отличается от неё тем, что никакие объекты в памяти компьютера не хранятся.  Изображение строится по уравнению (или по системе уравнений), поэтому ничего, кроме  формулы, хранить не надо. Изменив коэффициенты в уравнении, можно получить  совершенно другую картину. Способность фрактальной графики моделировать образы  живой природы вычислительным путем часто используют для автоматической  генерации необычных иллюстраций. В 3D Studio Max, например, для генерации  деревьев используется фрактальный алгоритм (рисунок 23). И это не исключение -  большинство текстур местности в современных компьютерных играх представляют  фракталы. Горы, лес и облака на картинке - фракталы.</p>
<p align="center"><img width="144" height="144" src="lk1_clip_image005_0000.jpg"><br>
  Рисунок 23 &ndash; Использование  фрактального алгоритма для генерации деревьев</p>
<p>Фракталы (более подробно в <a href="../lk15/lk15.htm">лекции 15</a>)- это великое открытие XX века, открытие того, что  простые, даже примитивные по своему устройству системы могут иметь чрезвычайно  сложное поведение, не описываемое никакой простой закономерностью (например,  периодической). Такое поведение хаотично, но &quot;хаос&quot; в данном случае  означает не отсутствие порядка, а слишком сложный, нетривиальный порядок!<br>
  Идея о том, что хаос, связанный с фрактальными траекториями,  - это порядок, но порядок очень сложный, легла в основу музыкального редактора  FractMus 2000, созданного Густаво Диасом Хересом.<br>
  Программа FractMus занимается тем, что генерирует  фрактальную траекторию по одному из известных алгоритмов и полученную  последовательность чисел по простым правилам переводит в последовательности  нот. Как источник свежих музыкальных идей программа вполне дееспособна, в чем  убеждает прилагаемый к программе обширный набор пьес, которые созданы с её  помощью.<br>
  &quot;Сжатие изображений&quot; - слова, которые не оставляют  равнодушным ни одного интернетчика. Web-мастера хотят показать, а потребители  увидеть большие, яркие и четкие картинки. Вот потому и бьются программисты и  математики, придумывая как бы картинку побольше запихнуть в файл размером поменьше.  К сожалению, красота плохо сжимаема.<br>
  В середине 80-х годов математика Майкла Барнсли из  Технологического университета Джорджии осенила блестящая идея. Ну хорошо,  выращивая фракталы по простым правилам можно получить очень правдоподобные  листья, деревья, горы и так далее. А нельзя ли сделать наоборот: по заданной  картинке найти такой компактный набор правил построения фрактала, чтобы тот, по  крайней мере в каком-то диапазоне масштабов, был ни отличим от исходной  картинки? Тогда вместо неё можно было передавать по каналам связи и хранить на  винчестере эти правила. К сожалению, пока фрактальное сжатие изображений  развивается очень медленно, хотя именно эта технология была использована  Microsoft при создании знаменитой энциклопедии Encarta.<br>
  Файлы фрактальных изображений имеют расширение fif. Обычно  файлы в формате fif получаются несколько меньше файлов в формате jpg, но бывает  и наоборот. Самое интересное начинается, если рассматривать картинки со все  большим увеличением. Файлы в формате jpg почти сразу демонстрируют свою  дискретную природу - появляется пресловутая лесенка. А вот fif файлы, как и  положено фракталам, с ростом увеличения показывают все новую степень  детализации структуры, сохраняя эстетику изображения.<br>
  Фрактальная графика &ndash; одна из быстроразвивающихся и  перспективных видов компьютерной графики. Это вычисляемая графика, основанная на программировании изображения. Поэтому  она обычно используется для построения графиков и диаграмм. Средствами такой  графики оснащены любые табличные процессоры, например, Excel, Lotus, QuatroPro, SuperCalc и текстовые редакторы, например MS Word. Отличительными чертами фрактальной графики можно  назвать:</p>
<ul>
  <li>изображение  формируется по уравнениям;</li>
  <li>в  памяти хранятся не объекты, а их уравнения;</li>
  <li>позволяет  моделировать путем математических вычислений сложные, причудливые и необычные  рисунки.</li>
</ul>
<h2><a name="_Toc402445739"></a><a name="_Toc402404260">Форматы графических файлов</a></h2>
<p>Любая информация, хранящаяся в файле, - это  последовательность байт. Каждый байт может принимать значение от 0 до 255. <em><strong>Формат графического файла </strong></em><em>&mdash; </em>способ хранения графической информации в  файле (растровый или векторный), а также форму хранения информации  (используемый алгоритм сжатия для уменьшения объёма файла). <br>
  В условиях отсутствия стандартов каждый разработчик  изобретал новый формат для собственных приложений. Поэтому возникали большие  проблемы обмена данными между различными программами (текстовыми процессорами,  издательскими системами, пакетами иллюстративной графики, программами САПР и  др.). Но с начала 80-х гг. официальные группы по стандартам начали создавать  общие форматы для различных приложений. Единого формата, пригодного для всех  приложений, нет и быть не может, но всё же некоторые форматы стали стандартными  для целого ряда предметных областей.<br>
  Эффективная работа с графикой подразумевает не только  хорошее владение определенными графическими программами, средствами для  создания и обработки изображений, но и требует конкретных знаний в области  представления и хранения графической информации. Пользователю  графической программы не требуется знать, как именно в том или ином формате  хранится информация о графических данных. Однако умение разбираться в  особенностях форматов имеет большое значение для эффективного хранения  изображений и организации обмена данными между различными приложениями.<br>
  Если вы хотите создать рисунок, подготовить чертеж или,  например, откорректировать фотографию, то наверняка столкнетесь с проблемой  выбора правильного средства для достижения поставленной задачи и попытаетесь  использовать имеющиеся возможности современных графических редакторов таким  образом, чтобы достичь наиболее качественного результата.<br>
  Изображение может быть обработано несколькими графическими  программами прежде, чем примет свой окончательный вид. Например, исходная  фотография сначала сканируется, затем улучшается её чёткость и производится  коррекция цветов в программе <strong>Adobe</strong><strong> </strong><strong>PhotoShop. </strong>После этого  изображение может быть экспортировано в программу рисования, такую как <strong>CorelDRAW</strong><strong> </strong>или <strong>Adobe Illustrator</strong>, для  добавления рисованных картинок. Если изображение создаётся для статьи в журнале  или книги, то оно должно быть импортировано в издательскую систему <strong>QuarkXPress </strong>или <strong>Adobe PageMaker</strong>. Если же  изображение должно появиться в мультимедиа-презентации, то оно, вероятнее  всего, будет использовано в <strong>Microsoft</strong><strong> </strong><strong>PowerPoint,</strong><strong> </strong><strong>Macromedia</strong><strong> </strong><strong>Director</strong><strong> </strong>или  размещено на Web-странице.<br>
  Каким же форматом воспользоваться при сохранении  графического файла, чем руководствоваться при этом? В последние годы, в связи с  широким распространением Интернета и, в частности, технологий World Wide Web,  обозначилась также проблема разработки форматов изображений, достаточно  компактных для передачи в сети.<br>
  Различают растровые форматы (PSD,  BMP, TIFF, PCX, JPEG, GIF, PNG и т.д.), векторные (WMF и т.д.) и универсальные,  позволяющие использовать и векторную, и растровую графику (PDF, EPS, CDR, DXF и  т.д.). Характеристики основных форматов приведены в таблице.<br>
  Таблица  &ndash; Форматы графических файлов</p>
<table border="1" cellspacing="0" cellpadding="0" width="100%">
  <tr>
    <td width="17%" valign="top"><br>
      <strong>Форматы</strong></td>
    <td width="23%" valign="top"><p align="left"><strong>Достоинства</strong></p></td>
    <td width="22%" valign="top"><p align="left"><strong>Недостатки</strong></p></td>
    <td width="11%" valign="top"><p align="left"><strong>Сжатие</strong></p></td>
    <td width="25%" valign="top"><p align="left"><strong>Примечание</strong></p></td>
  </tr>
  <tr>
    <td width="100%" colspan="5" valign="top"><p align="left"><strong>Растровые    форматы</strong></p></td>
  </tr>
  <tr>
    <td width="17%" valign="top"><p align="left">PSD<br>
      (Adobe Photoshop Document) </p></td>
    <td width="23%" valign="top"><p align="left">Сохраняет все, что может    быть создано в Photoshop</p></td>
    <td width="22%" valign="top"><p align="left">Большой размер файла</p></td>
    <td width="11%" valign="top"><p align="left">RLE</p></td>
    <td width="25%" valign="top"><p align="left">PSD &ndash; &laquo;родной&raquo; формат    популярного растрового редактора Photoshop. Он позволяет записывать    изображение со многими слоями, их масками, дополнительными каналами,    контурами и другой информацией - все, что может сделать Photoshop.</p></td>
  </tr>
  <tr>
    <td width="17%" valign="top"><p align="left">BMP (Windows Device    Independent Bitmap) </p></td>
    <td width="23%" valign="top"><p align="left">Поддерживается всеми графическими редакторами,    разработанными под Windows<br>
      Быстрый вывод на экран</p></td>
    <td width="22%" valign="top"><p align="left">Ограниченные возможности представления цветов: не    используется модели CMYK и перцепционные<br>
      Большой размер<br>
      Плохо подходит для печати и для использования в интернете<br>
      Сжатие может выполняться некорректно</p></td>
    <td width="11%" valign="top"><p align="left">RLE</p></td>
    <td width="25%" valign="top"><p align="left">Собственный формат, разработанный для Windows. (Все программы Windows, которые могут открывать графические    файлы).<br>
      Используется для рабочего стола, для заставок программ,    для других целей использовать не рекомендуется.</p></td>
  </tr>
  <tr>
    <td width="17%" valign="top"><p align="left">TIFF<br>
      (Tagged Image File Format) </p></td>
    <td width="23%" valign="top"><p align="left">Хорошая совместимость. Поддерживается различными    программами и различными ОС<br>
      Поддерживает все цветовые модели<br>
      пол</p></td>
    <td width="22%" valign="top"><p align="left">&nbsp;</p></td>
    <td width="11%" valign="top"><p align="left">LZW и др.</p></td>
    <td width="25%" valign="top"><p align="left">Хорошо подходит для импорта между программами, а также для    импорта в издательские системы и системы векторной графики.<br>
      Большинство    растровых редакторов и настольных издательских систем; векторные редакторы,    поддерживающие растровые </p></td>
  </tr>
  <tr>
    <td width="17%" valign="top"><p align="left">PCX</p></td>
    <td width="23%" valign="top"><p align="left">Хорошо подходит для сохранения файлов в оттенках серого</p></td>
    <td width="22%" valign="top"><p align="left">Не поддерживает CMYK и перцепционные модели; недостаточная    поддержка дополнительной информации об изображении; имеется несколько версий    этого формата, не всегда совместимых</p></td>
    <td width="11%" valign="top"><p align="left">RLE</p></td>
    <td width="25%" valign="top"><p align="left">&nbsp;</p></td>
  </tr>
  <tr>
    <td width="17%" valign="top"><p align="left">JPEG<br>
      (Joint    Photographic Experts Group)</p></td>
    <td width="23%" valign="top"><p align="left">Хорошее соотношение качества изображения, размеров файла и    скорости загрузки</p></td>
    <td width="22%" valign="top"><p align="left">Не поддерживается индексирование цвета; недостаточно    поддерживается информация об изображении, используется метод сжатия с    потерями информации, что может привести к потере качества изображений</p></td>
    <td width="11%" valign="top"><p align="left">JPEG</p></td>
    <td width="25%" valign="top"><p align="left">Фактически представляет собой метод сжатия. Последовательные версии программ    редактирования растровой графики; векторные редакторы, поддерживающие    растровые объекты </p></td>
  </tr>
  <tr>
    <td width="17%" valign="top"><p align="left">GIF</p></td>
    <td width="23%" valign="top"><p align="left">Компактность файлов, возможность через строчного вывода на    экран изображение выводится за 4 прохода, в каждый проход каждая 4-я строка    (что позволяет просмотреть файл окончательной её загрузки и, если требуется,    отказаться от загрузки)</p></td>
    <td width="22%" valign="top"><p align="left">Ограниченные возможности использования цветов, только 256    цветов. Ограниченная поддержка информации об изображении</p></td>
    <td width="11%" valign="top"><p align="left">LZW</p></td>
    <td width="25%" valign="top"><p align="left">Был разработан для передачи графической информации в    сетях, постепенно выходит из использования</p></td>
  </tr>
  <tr>
    <td width="17%" valign="top"><p align="left">PNG</p></td>
    <td width="23%" valign="top"><p align="left">Те же, что у GIF</p></td>
    <td width="22%" valign="top"><p align="left">В основном те же, что и у GIF (но цветов больше)</p></td>
    <td width="11%" valign="top"><p align="left">Аналог. LZW</p></td>
    <td width="25%" valign="top"><p align="left">Разработан как замена для GIF</p></td>
  </tr>
  <tr>
    <td width="100%" colspan="5" valign="top"><p align="left">Векторные форматы</p></td>
  </tr>
  <tr>
    <td width="17%" valign="top"><p align="left">WMF (Windows MetaFile) </p></td>
    <td width="23%" valign="top"><p align="left">Совместим практически со всеми программами Windows</p></td>
    <td width="22%" valign="top"><p align="left">Не может содержать растровые объекты, плохо совместим с    другими ОС, может искажать цвета</p></td>
    <td width="11%" valign="top"><p align="left">&ndash;</p></td>
    <td width="25%" valign="top"><p align="left">Разработан для обмена данными между Windows приложениями    через буфер обмена. Большинство    приложений Windows </p></td>
  </tr>
  <tr>
    <td width="100%" colspan="5" valign="top"><p align="left">Универсальные    форматы</p></td>
  </tr>
  <tr>
    <td width="17%" valign="top"><p align="left">CDR (CorelDRAW)</p></td>
    <td width="23%" valign="top"><p align="left">&nbsp;</p></td>
    <td width="22%" valign="top"><p align="left">&nbsp;</p></td>
    <td width="11%" valign="top"><p align="left">&ndash;</p></td>
    <td width="25%" valign="top"><p align="left">Собственный    формат редактора CorelDRAW, могут использовать и    другие векторные редакторы, настольные издательские системы: FreeHand,    Illustrator, PageMaker </p></td>
  </tr>
  <tr>
    <td width="17%" valign="top"><p align="left">DXF (Drawing Interchange Format)</p></td>
    <td width="23%" valign="top"><p align="left">&nbsp;</p></td>
    <td width="22%" valign="top"><p align="left">&nbsp;</p></td>
    <td width="11%" valign="top"><p align="left">&ndash;</p></td>
    <td width="25%" valign="top"><p align="left">Основной формат программ САПР (AutoCAD), многие векторные редакторы, некоторые настольные    издательские системы</p></td>
  </tr>
  <tr>
    <td width="17%" valign="top"><p align="left">EPS (Encapsulated PostScript),    PDF</p></td>
    <td width="23%" valign="top"><p align="left">&nbsp;</p></td>
    <td width="22%" valign="top"><p align="left">&nbsp;</p></td>
    <td width="11%" valign="top"><p align="left">&ndash;</p></td>
    <td width="25%" valign="top"><p align="left">Предназначен для хранения и печати документов, а не    редактирования. Большинство настольных издательских    систем и векторных программ, некоторые растровые программы</p></td>
  </tr>
</table>
<p>Формат <strong>BMP</strong> является стандартным форматом MS Windows, однако, большого распространения не  получил из-за больших размеров файлов, особенно при сохранении графики с  максимальным количеством цветов - 16,7 млн. <br>
  Из большого числа форматов графических файлов в Интернете сейчас  широко используются только два - <strong>GIF</strong> и <strong>JPEG</strong>, т.к. они наиболее компактные  и независимые от платформ ПК (тип процессора, операционной системы и т.д.). </p>
<h3><a name="_Toc402445740">GIF  - формат</a></h3>
<p>Популярный формат GIF разработан фирмой CompuServe, как не  зависящий от аппаратного обеспечения. Он предназначен для хранения растровых  изображений с сжатием (чертежей, графиков и рисунков). В одном файле этого  формата может храниться несколько изображений. Обычно эта возможность  используется для хранения анимированных изображений (как набор кадров). Не  стоит сохранять в формате GIF, например, многоцветные фотографии, размер файла  останется довольно большим, а качество изображения заметно ухудшится за счёт  уменьшения количества цветов. <br>
  GIF-формат  позволяет записывать изображение &quot;через строчку&quot; (Interlaced),  благодаря чему, имея только часть файла, можно увидеть изображение целиком, но  с меньшим разрешением. Эта возможность широко применяется в Интернет. Сначала  вы видите картинку с грубым разрешением, а по мере поступления новых данных ее качество  улучшается. Основное ограничение формата GIF состоит в том, что цветное  изображение может содержать не более 256 цветов. Для полиграфии этого явно  недостаточно.<br>
  <strong>Достоинства </strong><strong>GIF-формата:</strong></p>
<ul>
  <li>GIF-рисунок может быть  &laquo;прозрачным&raquo;. То есть, один цвет можно удалить из палитры GIF, определив его  как прозрачный. Тогда при отображении, сквозь точки, окрашенные в этот цвет, на  рисунке будет виден фон. </li>
  <li>Возможность  загружать их, так называемым, чересстрочным методом. </li>
  <li>Могут  содержать не только статичные рисунки, но и целые анимационные фрагменты. На  самом деле, эти фрагменты представляют собой последовательности нескольких  статичных кадров, а также информацию о том, сколько времени каждый кадр должен  задерживаться на экране. </li>
</ul>
<h3><a name="_Toc402445741">JPEG  - формат</a></h3>
<p>Формат растровых  графических файлов JPEG (Joint Photographic Experts Group - Объединенная  экспертная группа по фотографии) был разработан компанией C-Cube Microsystems,  как эффективный метод хранения изображений с большой глубиной цвета, например,  получаемых при сканировании фотографий с многочисленными едва уловимыми (а  иногда и неуловимыми) оттенками цвета. Алгоритм сжатия с потерями (а не  алгоритм без потерь) позволяет уменьшить объем файла в десятки раз, однако  приводит к необратимой потере качества изображения. Используется для размещения  графических изображений на Web-страницах в Интернете. JPEG-формат лучше  использовать для хранения фотографий и изображений с большим количеством  цветов.<br>
  (Алгоритм сжатия без потерь так сохраняет информацию об  изображении, что распакованное изображение в точности соответствует оригиналу.  При сжатии с потерями приносится в жертву часть информации об изображении,  чтобы достичь большего коэффициента сжатия).<br>
  Сжатие, используемое в  формате JPEG, необратимо искажает изображение. Это не заметно при его простом  просмотре, но становится явным при последующих манипуляциях. Зато размер файла  получается от 10 до 500 раз меньше, чем BMP! Если вы решили записать  изображение в формате JPEG, то лучше выполнить все необходимые операции перед  первой записью файла.<br>
  Итак, при выборе между форматом <strong>JPG</strong> и <strong>GIF</strong> можно  придерживаться следующих рекомендаций: </p>
<ul>
  <li>если  изображение размещается лишь с оформительскими целями, то его полное  отображение становится необязательным, и в этом случае логично использовать  чересстрочный формат <strong>GIF</strong>;</li>
  <li>если  изображение размещается с целью их показа, как, например, многочисленные странички  музеев, журналов и т.д. в Интернете с полноцветными картинками больших  размеров, то их, скорее всего, нужно будет загружать полностью, тогда  необходимо использовать <strong>JPEG</strong>-формат. </li>
</ul>
<h3><a name="_Toc402445742">TIFF-формат</a></h3>
<p><strong>TIFF</strong> &mdash; был создан в качестве универсального формата  для цветных изображений. Формат <strong>TIFF</strong> позволяет записывать как цветные  изображения с максимальным количеством цветов 16,7 млн., так и монохромные  изображения без потери качества в несжатом или почти несжатом виде. Более того,  в файлах этого формата можно хранить изображения в разных цветовых моделях,  например в <strong>CMYK</strong> (используется в  основном для полиграфии). Недостаток формата <strong>TIFF</strong> заключается в том, что файлы, в этом формате, занимают много  места на носителе информации.</p>
<h3><a name="_Toc402404265"></a><a name="_Toc402445743">C</a>охранение изображений в собственных  и &laquo;чужих&raquo; форматах </h3>
<p>Как правило, графические программы  используют свои собственные форматы для сохранения изображений во внешней  памяти.<br>
  <strong>Собственный файловый формат</strong><em> &mdash; </em>частный и  наиболее эффективный формат для хранения файлов отдельного графического  приложения. Например, &laquo;родной&raquo;  формат <strong>CorelDRAW</strong><strong> &mdash; </strong><strong>CDR</strong><strong>, </strong><strong>Adobe</strong><strong> </strong><strong>PhotoShop</strong><strong> &mdash; </strong><strong>PSD</strong><strong>, </strong><strong>Fractal</strong><strong> </strong><strong>Design</strong><strong> </strong><strong>Painter</strong><strong> &mdash; </strong><strong>RIFF</strong><strong>, </strong><strong>Paint</strong><strong> </strong>(стандартная программа WINDOWS ) &mdash; <strong>BMP</strong>. <br>
  При сохранении  изображения в файле всегда нужно указывать тип формата. На рисунке 24 показано  диалоговое окно <strong>(Ехро</strong><strong>rt</strong><strong>\Экспорт), </strong>используемое в программе <strong>CorelDRAW</strong><strong>.</strong> <br>
  Кроме того, для каждого &laquo;чужого&raquo;  графического формата открываются дополнительные диалоговые окна, с помощью  которых пользователь устанавливает параметры формата (количество используемых  цветов, необходимость сжатия &mdash; для <strong>BMP</strong> и <strong>TIFF</strong>, коэффициент сжатия  &mdash; для <strong>JPEG</strong> и др.).<br>
  <img width="682" height="566" src="lk1_clip_image001.gif" alt="http://www.mkgt.ru/files/material-static/practicum/teoriya/03-05.gif"> <br>
  Рисунок 24 - Диалоговое окно для  сохранения в CorelDRAW изображения в формате JPEG </p>
<h3><a name="_Toc402445744">Преобразование файлов  из одного формата в другой</a></h3>
<p>Необходимость  преобразования графических файлов из одного формата в другой может возникнуть  по разным причинам:</p>
<ul>
  <li>программа, с которой работает пользователь,  не воспринимает формат его файла;</li>
  <li>данные, которые надо передать другому  пользователю, должны быть представлены в специальном формате.</li>
</ul>
<h4><a name="_Toc402404266"><strong>Преобразование файлов из растрового формата  в векторный</strong></a><strong></strong></h4>
<p>Существуют два  способа преобразования файлов из растрового формата в векторный:</p>
<ul>
  <li>преобразование  растрового файла в растровый объект векторного изображения;</li>
  <li>трассировка  растрового изображения для создания векторного объекта.</li>
</ul>
<p>Первый способ  используется в программе CorelDRAW, которая, как правило, успешно импортирует  файлы различных растровых форматов. К примеру, если растровая картинка содержит  16 миллионов цветов, CorelDRAW покажет изображение, приближенное по качеству к телевизионному. Однако,  импортируемый растровый объект может становиться довольно большим даже в том  случае, если исходный файл невелик. В файлах растровых форматов информация  хранится достаточно эффективно, так как часто используются методы сжатия. Векторные  форматы такой способностью не обладают. Поэтому растровый объект, хранящийся в  векторном файле, может значительно превосходить по размерам исходный растровый  файл.<br>
  Особенность второго  способа преобразования растрового изображения в векторное заключается в  следующем. Программа трассировки растровых изображений (например, CorelTRACE) ищет группы пикселей с одинаковым цветом, а затем создает  соответствующие им векторные объекты. После трассировки векторизованные рисунки  можно редактировать, как угодно. На рисунке 25 показано растровое изображение,  которое хорошо преобразуется в векторное. Дело в том, что растровые рисунки,  имеющие четко выраженные границы между группами пикселей одинакового цвета,  хорошо переводятся в векторные. В то же время результат трассировки растрового  изображения фотографического качества со сложными цветовыми переходами выглядит  хуже оригинала.</p>
<table border="0" cellspacing="5" cellpadding="0" width="100%">
  <tr>
    <td><p align="center"><img width="133" height="187" src="lk1_clip_image002.gif" alt="http://www.mkgt.ru/files/material-static/practicum/teoriya/03-06a.gif"></p></td>
    <td><p align="center"><img width="133" height="187" src="lk1_clip_image003.gif" alt="http://www.mkgt.ru/files/material-static/practicum/teoriya/03-06b.gif"></p></td>
  </tr>
  <tr>
    <td><p align="center">Исходный растровый рисунок</p></td>
    <td><p align="center">Векторизованный рисунок</p></td>
  </tr>
</table>
<p align="center">Рисунок 25 - Растровый рисунок с четкими границами,  преобразованный в векторный формат</p>
<h4><a name="_Toc402404267"><strong>Преобразование  файлов одного векторного формата в другой</strong></a> <strong> </strong></h4>
<p>Векторные форматы  содержат описания линий, дуг, закрашенных полей, текста и т. д. В различных  векторных форматах эти объекты описываются по-разному. Когда программа пытается  преобразовать один векторный формат в другой, она действует подобно обычному  переводчику, а именно:</p>
<ul>
  <li>считывает описания объектов на одном  векторном языке,</li>
  <li>пытается перевести их на язык нового  формата.</li>
</ul>
<table border="0" cellspacing="5" cellpadding="0" width="100%">
  <tr>
    <td><p align="center"><img width="161" height="224" src="lk1_clip_image004_0001.jpg" alt="http://www.mkgt.ru/files/material-static/practicum/teoriya/03-7a.jpg"></p></td>
    <td><p align="center"><img width="161" height="224" src="lk1_clip_image005_0001.jpg" alt="http://www.mkgt.ru/files/material-static/practicum/teoriya/03-7b.jpg"></p></td>
  </tr>
  <tr>
    <td><p align="center">Исходное растровое изображение</p></td>
    <td><p align="center">Векторизованное изображение</p></td>
  </tr>
</table>
<p align="center">Рисунок 26 - Растровое изображение  фотографического качества, преобразованное в векторный формат<br>
  Если  программа-переводчик считает описание объекта, для которого в новом формате нет  точного соответствия, этот объект может быть либо описан похожими командами  нового языка, либо не описан вообще. Таким образом, некоторые части рисунка  могут исказиться или исчезнуть. Всё зависит от сложности исходного изображения.  На рисунке 27 представлен один из возможных результатов преобразования файла из  одного векторного формата в другие. Исходный рисунок создан в программе CorelDRAW ! и состоит из следующих элементов:  импортированная растровая картинка в формате JPEG , рамка вокруг растровой картинки, текст,  прямоугольник с конической заливкой.<br>
  При преобразовании  рисунка 27а в формат CGM  сохранились все исходные элементы (рисунок 27б). Формат DXF проигнорировал растровую картинку, исказил  контур вокруг нее, коническую заливку, а также увеличил размер шрифта. Дело в  том, что этот формат предназначен для конструкторских разработок и,  следовательно, в нём отсутствуют команды для описания различных художественных  эффектов.</p>
<table border="0" cellspacing="5" cellpadding="0" width="100%">
  <tr>
    <td width="35%"><br>
      <img width="151" height="192" src="lk1_clip_image006.jpg" alt="http://www.mkgt.ru/files/material-static/practicum/teoriya/03-8a.jpg"></td>
    <td width="31%"><p align="center"><img width="118" height="148" src="lk1_clip_image007.jpg" alt="http://www.mkgt.ru/files/material-static/practicum/teoriya/03-8b.jpg"></p></td>
    <td width="34%"><p align="center"><img width="119" height="146" src="lk1_clip_image008.jpg" alt="http://www.mkgt.ru/files/material-static/practicum/teoriya/03-8v.jpg"></p></td>
  </tr>
  <tr>
    <td><p align="center">а) Исходное изображение в формате&nbsp;<strong>CDR</strong></p></td>
    <td><p align="center">б) Результат преобразования в векторный    форамат&nbsp;<strong>CGM</strong></p></td>
    <td><p align="center">в) Результат преобразования в векторный    форамат&nbsp;<strong>DXF</strong></p></td>
  </tr>
</table>
<p align="center">Рисунок 27 - Результаты преобразования одного векторного формата  в другой</p>
<h4><strong>Преобразование файлов из векторного формата в растровый</strong></h4>
<p>Преобразование  изображений из векторного формата в растровый (этот процесс часто называют  растрированием векторного изображения) встречается очень часто. Прежде, чем  разместить рисованную (векторную) картинку на фотографии, её необходимо  экспортировать в растровый формат. Например, изображение окна на рисунке 28  было отсканировано и сохранено в файле формата <strong>JPEG</strong>. Рисунок утёнка создан в векторной  программе <strong>CorelDRAW</strong> и затем экспортирован в файл  формата <strong>TIFF</strong>. Монтаж двух  растровых изображений выполнен в программе <strong>Adobe</strong><strong> </strong><strong>PhotoShop</strong>.<br>
  <img width="199" height="298" src="lk1_clip_image009_0000.jpg" alt="http://www.mkgt.ru/files/material-static/practicum/teoriya/03-9.jpg"> <br>
  Рисунок 28 - Рисованная картинка, вставленная в  фотографию<br>
  Каждый раз, когда  векторный рисунок направляется на устройство вывода (в частности, монитор или  принтер), он подвергается растрированию &mdash; преобразованию в набор видеопикселей  или точек.<br>
  При экспорте  векторных файлов в растровый формат может быть потеряна информация, связанная с  цветом исходного изображения. Это объясняется тем, что в ряде растровых  форматов количество цветов ограничено (например, форматGIF использует не более  256 цветов).</p>
<h4><strong>Преобразование файлов одного растрового формата в другой</strong></h4>
<p>Этот вид  преобразования обычно самый простой и заключается в чтении информации из  исходного файла и записи ее в новом файле, где данные о размере изображения,  битовой глубине и цвете каждого видеопикселя хранятся другим способом. Если  старый формат использует больше цветов, чем новый, то возможна потеря  информации. Преобразование файла с 24-битовым цветом (16777216 цветов) в файл с  8-битовым цветом (256 цветов) требует изменения цвета почти каждого пикселя. В  простейшем случае это делается так: для каждого пикселя исходного файла ищется  наиболее близкий к нему цвет из нового ограниченного набора цветов. При таком  способе возможны нежелательные эффекты, когда часть рисунка, содержащая большое  количество элементов, оказывается закрашенной одним цветом или когда плавные  переходы цвета становятся резкими. На рисунке 29 показано, к каким результатам  может привести уменьшение количества цветов изображения.</p>
<table border="0" cellspacing="5" cellpadding="0" width="100%">
  <tr>
    <td width="49%"><br>
      <img width="185" height="148" src="lk1_clip_image010.gif" alt="http://www.mkgt.ru/files/material-static/practicum/teoriya/03-10a.gif"></td>
    <td width="51%"><p align="center"><img width="185" height="148" src="lk1_clip_image011.gif" alt="http://www.mkgt.ru/files/material-static/practicum/teoriya/03-10b.gif"></p></td>
  </tr>
  <tr>
    <td><p align="center">исходное изображение</p></td>
    <td><p align="center">результат преобразования в новый формат с    меньшим количеством цветов</p></td>
  </tr>
</table>
<p align="center">Рисунок 29 - при уменьшении количества цветов  появляются дефекты в изображении<br>
  Для преобразования  файлов из одного формата в другой используются специальные программы &mdash; преобразователи (конверторы) форматов.Однако  большинство графических программ (<strong>CorelDRAW</strong>, <strong>Adobe</strong><strong> </strong><strong>Illustrator</strong>,<strong> </strong><strong>Adobe</strong><strong> </strong><strong>PhotoShop</strong> и др.) могут читать и создавать файлы различных форматов, т. е. являются  преобразователями форматов.</p>
<h2><a name="_Toc402445745">Алгоритмы методов сжатия</a></h2>
<p>(<strong>Дополнительно изучить</strong> теоретический материал на <a href="../../extra_books/Компьютерная графика_С.М. Брундасов.pdf">стр.34-51 Учебного пособия С.М. Брундасова &quot;Компьютерная графика&quot;</a>)</p>
<p>Изображения фотографического качества, полученные с помощью  сканеров с высокой разрешающей способностью, часто занимают несколько мегабайт.  Например, если размер изображения 1766 х 1528, а количество используемых цветов  &mdash; 16777216, то объём растрового файла составляет около 8 Мб (информация о цвете  видеопикселей в файле занимает 1766 х 1528 х 24 / 8 / 1024 / 1024 Мб).<br>
  Решением проблемы хранения растровых изображений является  сжатие, т. е. уменьшение размера файла за счёт изменения способа организации  данных. Никому пока не удалось даже приблизиться к созданию идеального  алгоритма сжатия. Каждый алгоритм хорошо сжимает только данные вполне  определённой структуры.<br>
  Методы сжатия делятся на две категории:</p>
<ul>
  <li>сжатие  файла с помощью программ &mdash; архиваторов;</li>
  <li>сжатие,  алгоритм которого включён в формат файла.</li>
</ul>
<p>В первом случае специальная программа считывает исходный  файл, применяет к нему некоторый сжимающий алгоритм (архивирует) и создаёт  новый файл. Выигрыш в размере нового файла может быть значительным. Однако этот  файл не может быть использован ни одной программой до тех пор, пока он не будет  преобразован в исходное состояние (разархивирован). Поэтому такое сжатие  применимо только для длительного хранения и пересылки данных, но для  повседневной работы оно неудобно. В операционной системе MS Windows наиболее популярными  программами сжатия файлов являются  ZIP, RAR и другие.<br>
  Если же алгоритм сжатия включён в формат файла, то  соответствующие программы чтения правильно интерпретируют сжатые данные. Таким  образом, такой вид сжатия очень удобен для постоянной работы с графическими  файлами большого размера. Например, пусть в<strong> </strong><strong>CorelDRAW </strong>получен рисунок, который нужно  разместить в документе, созданном в программе <strong>Adobe PhotoShop</strong>. <strong>TIFF </strong>&mdash; один из растровых  форматов, с которыми может работать <strong>Adobe PhotoShop. </strong>При формировании файла формата <strong>TIFF </strong>выполняется сжатие  графических данных. Именно это обстоятельство учитывается соответствующей  программой чтения. Поэтому для достижения поставленной цели можно поступить  следующим образом:</p>
<ul>
  <li>сохранить рисунок, созданный в <strong>CorelDRAW</strong>, в файле формата <strong>TIFF;</strong></li>
  <li>импортировать этот файл в программу&nbsp;<strong>Adobe PhotoShop.</strong></li>
</ul>
<h3><a name="_Toc402445746">Сжатие  методом </a>RLE </h3>
<p>При<strong> сжатии  методом </strong><strong>RLE</strong><strong> </strong>(<strong>R</strong>un &mdash; <strong>L</strong>ength <strong>E</strong>ncoding) последовательность повторяющихся величин  (в нашем случае &mdash; набор бит для представления видеопикселя) заменяется парой &mdash; повторяющейся  величиной и числом её повторений. Например, если есть цепочка из 10 черных, а затем  20 зеленых пикселей, то она заменяется на обозначение &laquo;черный, 10, зеленый, 20&raquo;.  Такое сжатие эффективно для изображений с большими одноцветными (однотонными)  участками, но малоэффективно, например, для цветных фотографий. <br>
  Метод сжатия <strong>RLE</strong> включается в некоторые графические форматы, например, в формат <strong>PCX</strong><strong>. </strong><br>
  Программа сжатия  файла может сначала записывать количество видеопикселей, а затем их цвет или  наоборот. Поэтому возможна такая ситуация, когда программа, считывающая файл,  ожидает появления данных в ином порядке, чем программа, сохраняющая этот файл  на диске. Если при попытке открыть файл, сжатый методом <strong>RLE</strong>,<strong> </strong>появляется  сообщение об ошибке или полностью искажённое изображение, нужно считать этот  файл с помощью другой программы или преобразовать его в иной формат. Сжатие  методом <strong>RLE</strong> наиболее эффективно для  изображений, которые содержат большие области однотонной закраски, и наименее  эффективно &mdash; для отсканированных фотографий, так как в них нет длинных  последовательностей одинаковых видеопикселей.</p>
<h3><a name="_Toc402445747">Сжатие  методом </a>LZW </h3>
<p><strong>Метод сжатия </strong><strong>LZW</strong><strong> </strong>(назван так по первым буквам его  разработчиков <strong>L</strong>empel, <strong>Z</strong>iv, <strong>W</strong>elch) основан на поиске повторяющихся узоров в  изображении. <br>
  Метод основан на поиске повторяющихся комбинаций пикселей. Если такие  комбинации обнаруживаются, то им присваивается кодовое обозначение, и они  заменяются на это обозначение. Например, если в файле многократно встречается  последовательность из 5 черных, 7 зеленых, 3 красных, 6 белых пикселей (всего &ndash;  21 пиксель), то ей присваивается некоторое обозначение (например, некоторый  номер), и эта последовательность везде заменяется на обозначение. Сохраняется  также таблица обозначений.<br>
  Сильно насыщенные  узорами рисунки могут сжиматься до 0,1 их первоначального размера. Метод сжатия <strong>LZW</strong><strong> </strong>применяется для файлов форматов <strong>TIFF</strong><strong> </strong>и <strong>GIF</strong><strong>; </strong>при этом данные формата <strong>GIF</strong><strong> </strong>сжимаются всегда, а в случае формат <strong>TIFF</strong><strong> </strong>право выбора возможности сжатия  предоставляется пользователю. Существуют варианты формата <strong>TIFF</strong><strong>, </strong>которые используют другие методы сжатия. Из-за различных схем сжатия  некоторые версии формата <strong>TIFF</strong><strong> </strong>могут оказаться несовместимыми друг с другом. Это означает, что возможна  ситуация, когда файл в формате <strong>TIFF</strong><strong> </strong>не может быть прочитан в некоторой графической программе, хотя она  должна &laquo;понимать&raquo; этот формат. Другими словами, не все форматы <strong>TIFF</strong><strong> </strong>одинаковы. Но, несмотря на эту проблему, <strong>TIFF&nbsp;</strong>является одним из самых популярных растровых  форматов в настоящее время.</p>
<h3><a name="_Toc402445748">Сжатие  методом </a>JPEG </h3>
<p><strong>Метод сжатия </strong><strong>JPEG</strong><strong> </strong>обеспечивает высокий коэффициент сжатия для  рисунков фотографического качества. Формат файла <strong>JPEG</strong><strong>, </strong>использующий этот метод сжатия, разработан объединенной группой  экспертов по фотографии (<strong>J</strong>oint<strong>P</strong>hotographic <strong>E</strong>xperts <strong>G</strong>roup). Сжатие по методу <strong>JPEG</strong><strong> </strong>сильно уменьшает размер файла с растровым  рисунком (возможен коэффициент сжатия 100 : 1). Высокий коэффициент сжатия  достигается за счет сжатия с потерями, при котором в результирующем файле  теряется часть исходной информации.<br>
  Метод <strong>JPEG</strong><strong> </strong>использует тот факт, что человеческий глаз  очень чувствителен к изменению яркости, но изменения цвета он замечает хуже. <br>
  Поэтому при сохранении часть информации о цветах соседних пикселей  теряется без значительного ущерба для качества изображения. При сохранении  можно выбрать степень сжатия (чем больше степень сжатия, тем больше потери).  При многократном сохранении файла в формате JPEG качество изображения может  ухудшаться.<br>
  Поэтому при сжатии  этим методом запоминается больше информации о разнице между яркостями  видеопикселей и меньше &mdash; о разнице между их цветами. Так как вероятность  заметить минимальные различия в цвете соседних пикселей мала, изображение после  восстановления выглядит почти неизменным. Пользователю предоставляется  возможность контролировать уровень потерь, указывая степень сжатия. Благодаря  этому, можно выбрать наиболее подходящий режим обработки каждого изображения:  возможность задания коэффициента сжатия позволяет сделать выбор между качеством  изображения и экономией памяти. Если сохраняемое изображение &mdash; фотография,  предназначенная для высокохудожественного издания, то ни о каких потерях не  может быть и речи, так как рисунок должен быть воспроизведён как можно точнее.  Если же изображение &mdash; фотография, которая будет размещена на поздравительной  открытке, то потеря части исходной информации не имеет большого значения.  Эксперимент поможет определить наиболее допустимый уровень потерь для каждого  изображения.</p>
<p>&nbsp;</p>
<p><a href="../../presentations/1 лекция КГ история.ppt" target="_new">Презентация к лекции 1</a></p>
<p><a href="../../video/Н. Н. КОНСТАНТИНОВ - Кошечка (1968, Москва).mp4" target="_new">Видео к лекции 1</a></p>
<p>&nbsp;</p>
<p><strong>Контрольные  вопросы</strong></p>
<ol>
  <li>Что  означает термин &laquo;формат графического файла&raquo;?</li>
  <li>Почему  необходимо иметь общие форматы для различных приложений?</li>
  <li>Как  хранится изображение в файле векторного формата?</li>
  <li>Перечислите  несколько векторных форматов.</li>
  <li>Какая  информация запоминается в растровом файле?</li>
  <li>Как  можно уменьшить размер растрового файла?</li>
  <li>Какие  методы сжатия графических данных вам известны?</li>
  <li>Какие  форматы используются для хранения фотографий?</li>
  <li>Когда  возникает необходимость в преобразовании форматов файлов?</li>
  <li>Какие способы преобразования растрового формата  в векторный вам известны?</li>
  <li>Почему при преобразовании одного векторного  формата в другой некоторые части изображения могут исказиться или вообще  исчезнуть?</li>
  <li>. Каковы особенности преобразования одного растрового  формата в другой растровый формат?</li>
</ol>
</BODY>
</HTML>